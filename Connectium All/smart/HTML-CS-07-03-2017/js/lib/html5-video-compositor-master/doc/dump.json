[
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/audiomanager.js",
    "memberof": null,
    "longname": "src/audiomanager.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "\n\nfunction isIdInTrack(id, track){\n    for (let i = 0; i < track.length; i++) {\n        if (track[i].id === id){\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getTrackIndexsForId(id, tracks){\n    let trackIndexs = [];\n    for (let i = 0; i < tracks.length; i++) {\n        let track = tracks[i];\n        if (isIdInTrack(id, track)){\n            trackIndexs.push(i);\n        }\n    }\n    return trackIndexs;\n}\n\n\nclass AudioManager {\n    constructor(audioCtx){\n        this.audioCtx = audioCtx;\n        this.tracks = [];\n        this.audioNodes = new Map();\n        this.audioOutputNodes = [];\n    }\n        \n    createAudioNodeFromTrack(track){\n        if (this.audioCtx === undefined){\n            // There can only be a max of 6 AudioContexts in most browsers, so only instantiate it here rather than in \n            // constructor as it's genuinley needed. Otherwise having >6 VideoCompositor instances running will break \n            // the browser.\n            this.audioCtx = new AudioContext();\n        }\n        this.tracks.push(track);\n        let trackBus = this.audioCtx.createGain();\n        this.audioOutputNodes.push(trackBus);\n        return trackBus;\n    }\n\n    getAudioContext(){\n        if (this.audioCtx === undefined){\n            // There can only be a max of 6 AudioContexts in most browsers, so only instantiate it here rather than in \n            // constructor as it's genuinley needed. Otherwise having >6 VideoCompositor instances running will break \n            // the browser.\n            this.audioCtx = new AudioContext();\n        }\n        return this.audioCtx;\n    }\n\n    removeFromCacheById(id){\n        let node = this.audioNodes.get(id);\n        node.disconnect();\n        this.audioNodes.delete(id);\n    }\n\n    clearAudioNodeCache(){\n        for (let id of this.audioNodes.keys()){\n            this.removeFromCacheById(id);\n        }\n    }\n\n    update(mediaSources, currentlyPlaying){\n        let currentlyPlayingIds = [];\n        for (let i = 0; i < currentlyPlaying.length; i++) {\n            let mediaSourceRef = currentlyPlaying[i];\n            currentlyPlayingIds.push(mediaSourceRef.id);\n        }\n\n        if (mediaSources === undefined) return;\n        for (let id of mediaSources.keys()) {\n            let mediaSource = mediaSources.get(id);\n            let trackIndexs = getTrackIndexsForId(id, this.tracks);\n            if (trackIndexs.length ===0){\n                continue; //No mappings for this id\n            }    \n            if (!this.audioNodes.has(id)){\n                //if an AudioNode for this id does not exist, create it.\n                let audioNode;\n                try{\n                    audioNode = this.audioCtx.createMediaElementSource(mediaSource.element);\n                } catch (err) {\n                    continue;\n                }\n\n                this.audioNodes.set(id, audioNode);\n                //make the connections from the audio node to the appropriate output tracks\n                for (let i = 0; i < trackIndexs.length; i++) {\n                    let trackIndex = trackIndexs[i];\n                    audioNode.connect(this.audioOutputNodes[trackIndex]);\n                }\n            }else {\n            }\n        }\n        //TODO add test to make sure all id's for audio nodes stored in this.audioNodes exist in the current mediaSources, otherwise delete them.\n    }\n}\nexport default AudioManager;\n\n"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isIdInTrack",
    "memberof": "src/audiomanager.js",
    "longname": "src/audiomanager.js~isIdInTrack",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/audiomanager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getTrackIndexsForId",
    "memberof": "src/audiomanager.js",
    "longname": "src/audiomanager.js~getTrackIndexsForId",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/audiomanager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "tracks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AudioManager",
    "memberof": "src/audiomanager.js",
    "longname": "src/audiomanager.js~AudioManager",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/audiomanager.js",
    "importStyle": "AudioManager",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#constructor",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "audioCtx",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioCtx",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#audioCtx",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tracks",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#tracks",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioNodes",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#audioNodes",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioOutputNodes",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#audioOutputNodes",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createAudioNodeFromTrack",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#createAudioNodeFromTrack",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioCtx",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#audioCtx",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAudioContext",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#getAudioContext",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioCtx",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#audioCtx",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeFromCacheById",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#removeFromCacheById",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearAudioNodeCache",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#clearAudioNodeCache",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/audiomanager.js~AudioManager",
    "longname": "src/audiomanager.js~AudioManager#update",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "mediaSources",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentlyPlaying",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "audioManager",
    "memberof": "src/audiomanager.js",
    "longname": "src/audiomanager.js~audioManager",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/audiomanager.js",
    "importStyle": "audioManager",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "src/audiomanager.js~AudioManager"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/effect.js",
    "memberof": null,
    "longname": "src/effect.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "function refreshTextures(playlistEffectObject, textures, gl){\n    let textureOffset = 1;\n\n    if (playlistEffectObject.parameters === undefined) return;\n\n    let parameterKeys = Object.keys(playlistEffectObject.parameters);\n    for (let i = 0; i < parameterKeys.length; i++) {\n        let key = parameterKeys[i];\n        let parameter = playlistEffectObject.parameters[key];\n        if (typeof parameter !== \"number\"){\n            let texture = textures[textureOffset-1];\n            gl.activeTexture(gl.TEXTURE0 + textureOffset);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, parameter);\n            textureOffset += 1;\n        }  \n    }\n}\n\nfunction loadTextures(playlistEffectObject, gl){\n    if (playlistEffectObject.parameters === undefined) return [];\n    let parameterKeys = Object.keys(playlistEffectObject.parameters);\n    let textures = [];\n    for (let i = 0; i < parameterKeys.length; i++) {\n        let key = parameterKeys[i];\n        let parameter = playlistEffectObject.parameters[key];\n        if (typeof parameter !== \"number\"){\n            let texture = gl.createTexture();\n            textures.push(texture);                \n        }\n    }\n    refreshTextures(playlistEffectObject, textures, gl);\n    return textures;\n}\n\n\nfunction compileShader(gl, shaderSource, shaderType) {\n    let shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n    return shader;\n}\n\n\nfunction createShaderProgram(gl, vertexShaderSource, fragmentShaderSource){\n    let vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);\n    let fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n    let program = gl.createProgram();\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n   \n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)){\n        throw {\"error\":4,\"msg\":\"Can't link shader program for track\", toString:function(){return this.msg;}};\n    }\n    return program;\n}\n\n\nclass Effect {\n    constructor(playlistEffectObject, gl){\n        this.gl = gl;\n        this.vertexShaderSrc = playlistEffectObject.effect.vertexShader;\n        if (this.vertexShaderSrc === undefined){\n            this.vertexShaderSrc = \"\\\n                uniform float progress;\\\n                uniform float duration;\\\n                uniform vec2 source_resolution;\\\n                uniform vec2 output_resolution;\\\n                attribute vec2 a_position;\\\n                attribute vec2 a_texCoord;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main() {\\\n                    v_progress = progress;\\\n                    v_duration = duration;\\\n                    v_source_resolution = source_resolution;\\\n                    v_output_resolution = output_resolution;\\\n                    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\\n                    v_texCoord = a_texCoord;\\\n                }\";\n        }\n        this.fragmentShaderSrc = playlistEffectObject.effect.fragmentShader;\n        if (this.fragmentShaderSrc === undefined){\n            this.fragmentShaderSrc = \"\\\n            precision mediump float;\\\n            uniform sampler2D u_image;\\\n            varying vec2 v_texCoord;\\\n            varying float v_progress;\\\n            varying float v_duration;\\\n            varying vec2 v_source_resolution;\\\n            varying vec2 v_output_resolution;\\\n            void main(){\\\n                gl_FragColor = texture2D(u_image, v_texCoord);\\\n            }\";\n        }\n\n        this.parameters = playlistEffectObject.parameters;\n        if (this.parameters === undefined){\n            this.parameters = {};\n        }\n        if (playlistEffectObject.effect.defaultParameters !== undefined){\n            for (let key in playlistEffectObject.effect.defaultParameters) {\n                if (this.parameters[key]===undefined){\n                    this.parameters[key] = playlistEffectObject.effect.defaultParameters[key];\n                }\n            }\n        }\n        this.inputs = playlistEffectObject.inputs;\n        if (this.inputs === undefined){\n            this.inputs = [];\n        }\n\n        this.textures = loadTextures(playlistEffectObject, this.gl);\n        this.program = createShaderProgram(this.gl, this.vertexShaderSrc, this.fragmentShaderSrc);\n    }\n\n\n    update(playlistEffectObject){\n        refreshTextures(playlistEffectObject, this.textures, this.gl);\n        this.inputs = playlistEffectObject.inputs;\n        if (this.inputs === undefined){\n            this.inputs = [];\n        }\n    }\n\n}\n\nexport default Effect;"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "refreshTextures",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~refreshTextures",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "playlistEffectObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "textures",
        "types": [
          "*"
        ]
      },
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "loadTextures",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~loadTextures",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "playlistEffectObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "compileShader",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~compileShader",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "shaderSource",
        "types": [
          "*"
        ]
      },
      {
        "name": "shaderType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createShaderProgram",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~createShaderProgram",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "vertexShaderSource",
        "types": [
          "*"
        ]
      },
      {
        "name": "fragmentShaderSource",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Effect",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~Effect",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": "Effect",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#constructor",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "playlistEffectObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#gl",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "vertexShaderSrc",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#vertexShaderSrc",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "vertexShaderSrc",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#vertexShaderSrc",
    "access": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fragmentShaderSrc",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#fragmentShaderSrc",
    "access": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fragmentShaderSrc",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#fragmentShaderSrc",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parameters",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#parameters",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parameters",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#parameters",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#inputs",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#inputs",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textures",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#textures",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "program",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#program",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#update",
    "access": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "playlistEffectObject",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#inputs",
    "access": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/effect.js~Effect",
    "longname": "src/effect.js~Effect#inputs",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "effect",
    "memberof": "src/effect.js",
    "longname": "src/effect.js~effect",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/effect.js",
    "importStyle": "effect",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "src/effect.js~Effect"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/effectmanager.js",
    "memberof": null,
    "longname": "src/effectmanager.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Effect from \"./effect.js\";\n\nclass EffectManager {\n    constructor(gl){\n        this.effects = new Map();\n        this.gl = gl;\n        //Setup the default effect\n        this.newEffect(\"default\",{\"effect\":{}});\n    }\n    \n    newEffect(id, playlistEffectObject){\n        //The playlist effect object is the representation of the effect stored in the playlist object\n        let effect = new Effect(playlistEffectObject, this.gl);\n        this.effects.set(id, effect);\n    }\n\n    updateEffects(playlistEffectObjects){\n        if (playlistEffectObjects === undefined) return;\n        for (let key in playlistEffectObjects){\n            if (this.effects.has(key)){\n                //udpate the effect\n                this.effects.get(key).update(playlistEffectObjects[key]);\n            } else {\n                //create the effect\n                this.newEffect(key, playlistEffectObjects[key]);\n            }\n        }\n        //TODO clean-up effects that don't exist\n    }\n\n    getEffectForInputId(inputId){\n        let effectIdList = this.effects.keys();\n        for (let key of effectIdList) {\n            var effect = this.effects.get(key);\n            if (effect.inputs.indexOf(inputId) > -1){\n                return effect;\n            }\n        }\n        return this.effects.get(\"default\");\n    }\n}\n\nexport default EffectManager;\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EffectManager",
    "memberof": "src/effectmanager.js",
    "longname": "src/effectmanager.js~EffectManager",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/effectmanager.js",
    "importStyle": "EffectManager",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "effects",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#effects",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#gl",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newEffect",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#newEffect",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "playlistEffectObject",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateEffects",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#updateEffects",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "playlistEffectObjects",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getEffectForInputId",
    "memberof": "src/effectmanager.js~EffectManager",
    "longname": "src/effectmanager.js~EffectManager#getEffectForInputId",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "inputId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "effectManager",
    "memberof": "src/effectmanager.js",
    "longname": "src/effectmanager.js~effectManager",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/effectmanager.js",
    "importStyle": "effectManager",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "src/effectmanager.js~EffectManager"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/main.js",
    "memberof": null,
    "longname": "src/main.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "//Matthew Shotton, R&D User Experince,© BBC 2015\n\nimport VideoSource from \"./sources/videosource.js\";\nimport ImageSource from \"./sources/imagesource.js\";\nimport CanvasSource from \"./sources/canvassource.js\";\nimport EffectManager from \"./effectmanager.js\";\nimport AudioManager from \"./audiomanager.js\";\n\nlet updateables = [];\nlet previousTime;\nlet mediaSourceMapping = new Map();\nmediaSourceMapping.set(\"video\",VideoSource).set(\"image\",ImageSource).set(\"canvas\",CanvasSource);\n\n\nfunction registerUpdateable(updateable){\n    updateables.push(updateable);\n}\nfunction update(time){\n    if (previousTime === undefined) previousTime = time;\n    let dt = (time - previousTime)/1000;\n    for(let i = 0; i < updateables.length; i++){\n        updateables[i]._update(dt);\n    }\n    previousTime = time;\n    requestAnimationFrame(update);\n}\nupdate();\n\n\nclass VideoCompositor {\n    /**\n    * Instantiate the VideoCompositor using the passed canvas to render too.\n    *\n    * You can also pass an AudioContext for use when calling getAudioNodeForTrack. If one is not provided a context will be created internally and be accessible via the getAudioContext function.\n    *\n    * @param {Canvas} canvas - The canvas element to render too.\n    * @param {AudioContext} audioCtx - The AudioContext to create AudioNode's with.\n    * \n    * @example\n    * \n    * var canvas = document.getElementById('canvas');\n    * var audioCtx = new AudioContext();\n    * var videoCompositor = new VideoCompositor(canvas, audioCtx);\n    */\n    constructor(canvas, audioCtx){\n        this._canvas = canvas;\n        this._ctx = this._canvas.getContext(\"experimental-webgl\", { preserveDrawingBuffer: true, alpha: false });\n        this._playing = false;\n        this._mediaSources = new Map();\n        //this._mediaSourcePreloadNumber = 4; // define how many mediaSources to preload. This is influenced by the number of simultaneous AJAX requests available.\n        this._mediaSourcePreloadLookaheadTime = 10; // define how far into the future to load mediasources.\n        this._mediaSourcePostPlayLifetime = 0; // set how long until after a media source has finished playing to keep it around.\n        this._playlist = undefined;\n        this._eventMappings = new Map();\n        this._mediaSourceListeners = new Map();\n        this._max_number_of_textures = this._ctx.getParameter(this._ctx.MAX_TEXTURE_IMAGE_UNITS);\n\n        this._effectManager = new EffectManager(this._ctx);\n        this._audioManger = new AudioManager(audioCtx);\n\n        this._currentTime = 0;\n        this._playbackRate = 1.0;\n        this.duration = 0;\n        registerUpdateable(this);\n    }\n    \n    /**\n    * Sets how far in the future to look for preloading mediasources.\n    */\n    set preloadTime(time){\n        this._mediaSourcePreloadLookaheadTime = time;\n    }\n    get preloadTime(){\n        return this._mediaSourcePreloadLookaheadTime;\n    }\n\n    /**\n    * Sets how long mediasources will exist for after they have been .\n    */\n    set postPlayTime(time){\n        this._mediaSourcePostPlayLifetime = time;\n    }\n    get postPlayTime(){\n        return this._mediaSourcePostPlayLifetime;\n    }\n\n    /** \n    * Sets the playback rate of the video compositor. Msut be greater than 0.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * videoCompositor.playbackRate = 2.0; //Play at double speed\n    * videoCompositor.play();\n    */\n    set playbackRate(playbackRate){\n        if (typeof playbackRate === 'string' || playbackRate instanceof String){\n            playbackRate = parseFloat(playbackRate);\n        }\n        if (playbackRate < 0) playbackRate = 0;\n        this._playbackRate = playbackRate;\n    }\n\n    /**\n    * Gets the playback rate.\n    *\n    * @example\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * console.log(videoCompositor. playbackRate); // will print 1.0.\n    */\n    get playbackRate(){\n        return this._playbackRate;\n    }\n\n    /**\n    * Sets the current time through the playlist.\n    *\n    * Setting this is how you seek through the content. Should be frame accurate, but probably slow.\n    * @param {number} time - The time to seek to in seconds.\n    * \n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * videoCompositor.currentTime = 3; //Skip three seconds in.\n    * videoCompositor.play();\n    */\n    set currentTime(currentTime){\n        if (typeof currentTime === 'string' || currentTime instanceof String){\n            currentTime = parseFloat(currentTime);\n        }\n\n        console.debug(\"Seeking to\", currentTime);\n        if (this._playlist === undefined){\n            return;\n        }\n        let [toPlay, currentlyPlaying, finishedPlaying] = this._getPlaylistPlayingStatusAtTime(this._playlist, currentTime);\n\n        //clean up any nodes in the audioManager\n        this._audioManger.clearAudioNodeCache();\n\n        //clean-up any currently playing mediaSources\n        let _this = this;\n        this._mediaSources.forEach(function(mediaSource){\n            let shouldDestory = false;\n            \n            //check if the media source matches one in the new currently playing or list.\n            for (let i = 0; i < finishedPlaying.length; i++) {\n                if (mediaSource.id === finishedPlaying[i].id){\n                    shouldDestory = true;\n                }\n            }\n                \n            if (shouldDestory){\n                _this._mediaSources.delete(mediaSource.id); \n                mediaSource.destroy();\n            }\n        });\n        //this._mediaSources.clear();\n\n        //Load mediaSources\n        for (let i = 0; i < currentlyPlaying.length; i++) {\n            let mediaSourceID = currentlyPlaying[i].id;\n            //If the media source isn't loaded then we start loading it.\n            if (this._mediaSources.has(mediaSourceID) === false){\n                this._loadMediaSource(currentlyPlaying[i], function(mediaSource){\n                    mediaSource.seek(currentTime);\n                });\n\n            }else{\n               //If the mediaSource is loaded then we seek to the proper bit\n                this._mediaSources.get(mediaSourceID).seek(currentTime);\n            }\n\n        }\n\n        this._currentTime = currentTime;\n        let seekEvent = new CustomEvent('seek', {detail:{data:currentTime, instance:this}});\n        this._canvas.dispatchEvent(seekEvent);\n    }\n    \n    /**\n    * Get how far through the playlist has been played.\n    *\n    * Getting this value will give the current playhead position. Can be used for updating timelines.\n    * @return {number} The time in seconds through the current playlist.\n    * \n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * var time = videoCompositor.currentTime;\n    * //time === 0\n    */\n    get currentTime(){\n        return this._currentTime;\n    }\n    \n    /**\n    * Set the playlist object to be played.\n    *\n    * Playlist objects describe a sequence of media sources to be played along with effects to be applied to them. They can be modified as they are being played to create dynamic or user customizable content.\n    * \n    * At the top level playlist consist of tracks and effects. A track is an array of MediaSourceReferences. MediaSourceReference are an object which describe a piece of media to be played, the three fundamental MediaSourceRefernce types are \"video\", \"image\", and \"canvas\". Internally MediaSoureReferences are used to create MediaSources which are object that contain the underlying HTML element as well as handling loading and rendering of that element ot the output canvas.\n    *\n    * The order in which simultaneous individual tracks get rendered is determined by there index in the overall tracks list. A track at index 0 will be rendered after a track at index 1.\n    *\n    * Effects are objects consisting of GLSL vertex and fragment shaders, and a list of MediaSource ID's for them to be applied to.\n    * Effects get applied independently to any MediaSources in their input list.\n    *\n    * @param {Object} playlist - The playlist object to be played.\n    * \n    * @example <caption>A simple playlist with a single track of a single 4 second video</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video.mp4\", id:\"video\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById(\"canvas\");\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * videoCompositor.play();\n    *\n    * @example <caption>Playing the first 4 seconds of two videos, one after the other</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video.mp4\", id:\"video\"}, {type:\"video\", start:4, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n    *   ]\n    * }\n    *\n    * @example <caption>Playing a 4 second segment from within a video (not the use of sourceStart)</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, sourceStart:10, duration:4, src:\"video.mp4\", id:\"video\"}]\n    *   ]\n    * }\n    * \n    * @example <caption>A playlist with a 4 second video with a greenscreen effect applied rendered over a background image</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:10, src:\"video.mp4\", id:\"gs-video\"}],\n    *       [{type:\"image\", start:0, duration:10, src:\"background.png\", id:\"background\"}]\n    *   ]\n    *   effects:{\n    *       \"green-screen\":{                                  //A unique ID for this effect.\n    *           \"inputs\":[\"gs-video\"],                        //The id of the video to apply the effect to.\n    *           \"effect\": VideoCompositor.Effects.GREENSCREEN //Use the built-in greenscreen effect shader.\n    *       }\n    *   }\n    * }\n    *\n    * @example <caption>A pseudo 2 second cross-fade between two videos.</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:10, src:\"video1.mp4\", id:\"video1\"}],\n    *       [                                                  {type:\"video\", start:8, duration:10, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    *   effects:{\n    *       \"fade-out\":{                                      //A unique ID for this effect.\n    *           \"inputs\":[\"video1\"],                          //The id of the video to apply the effect to.\n    *           \"effect\": VideoCompositor.Effects.FADEOUT2SEC //Use the built-in fade-out effect shader.\n    *       },\n    *       \"fade-in\":{                                      //A unique ID for this effect.\n    *           \"inputs\":[\"video2\"],                          //The id of the video to apply the effect to.\n    *           \"effect\": VideoCompositor.Effects.FADEIN2SEC //Use the built-in fade-in effect shader.\n    *       }\n    *   }\n    * }\n    */\n    set playlist(playlist){\n        VideoCompositor.validatePlaylist(playlist);\n        this.duration = VideoCompositor.calculatePlaylistDuration(playlist);\n        this._playlist = playlist;\n        //clean-up any currently playing mediaSources\n        this._mediaSources.forEach(function(mediaSource){\n            mediaSource.destroy();\n        });\n        this._mediaSources.clear();\n        this.currentTime = this._currentTime;\n    }\n\n    /**\n    * Get the playlist object.\n    * @return {Object} The playlist object\n    */\n    get playlist(){\n        return this._playlist;\n    }\n\n    /**\n    * Play the playlist. If a pause() has been called previously playback will resume from that point.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * videoCompositor.play();\n    */\n    play(){\n        this._playing = true;\n        this._ctx.clearColor(0.0, 0.0, 0.0, 1.0);\n        this._ctx.clear(this._ctx.COLOR_BUFFER_BIT | this._ctx.DEPTH_BUFFER_BIT);\n        let playEvent = new CustomEvent('play', {detail:{data:this._currentTime, instance:this}});\n        this._canvas.dispatchEvent(playEvent);\n    }\n\n    /**\n    * Pause playback of the playlist. Call play() to resume playing.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * videoCompositor.play();\n    * \n    * setTimeout(videoCompositor.pause, 3000); //pause after 3 seconds\n    *\n    */\n    pause() {\n        this._playing = false;\n        this._mediaSources.forEach(function(mediaSource){\n            mediaSource.pause();\n        });\n        let pauseEvent = new CustomEvent('pause', {detail:{data:this._currentTime, instance:this}});\n        this._canvas.dispatchEvent(pauseEvent);\n    }\n\n    /**\n    * This adds event listeners to the video compositor. Events directed at the underlying canvas are transparently \n    * passed through, While events that target a video like element are handled within the VideoCompositor. Currently \n    * the VideoCompositor only handles a limited number of video like events (\"play\", \"pause\", \"ended\").\n    * \n    * @param {String} type - The type of event to listen to.\n    * @param {Function} func - The Function to be called for the given event.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * \n    * videoCompositor.addEventListener(\"play\", function(){console.log(\"Started playing\")});\n    * videoCompositor.addEventListener(\"pause\", function(){console.log(\"Paused\")});\n    * videoCompositor.addEventListener(\"ended\", function(){console.log(\"Finished playing\")});\n    * \n    * videoCompositor.play();\n    * \n    *\n    */\n    addEventListener(type, func){\n        //Pass through any event listeners through to the underlying canvas rendering element\n        //Catch any events and handle with a custom events dispatcher so things \n        if (this._eventMappings.has(type)){\n            this._eventMappings.get(type).push(func);\n        }else {\n            this._eventMappings.set(type, [func]);\n        }\n        this._canvas.addEventListener(type, this._dispatchEvents, false);\n    }\n\n\n    /**\n    * This removes event listeners from the video compositor that were added using addEventListener. \n    * \n    * @param {String} type - The type of event to remove.\n    * @param {Function} func - The Function to be removed for the given event.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * \n    * var playingCallback = function(){console.log(\"playing\");};\n    * videoCompositor.addEventListener(\"play\", playingCallback);\n    * \n    * videoCompositor.play();\n    * \n    * videoCompositor.removeEventListener(\"play\", playingCallback);\n    *\n    */\n    removeEventListener(type, func){\n        if (this._eventMappings.has(type)){\n            let listenerArray = this._eventMappings.get(type);\n            let listenerIndex = listenerArray.indexOf(func);\n            if (listenerIndex !== -1){\n                listenerArray.splice(listenerIndex, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n    * This method allows you to create a listeners for events on a specific MediaSource.\n    *\n    * To use this you must pass an object which has one or more the following function properties: play, pause, seek, \n    * isReady, load, destroy, render.\n    *\n    * These functions get called when the correspoinding action on the MediaSource happen. In the case of the render \n    * listener it will be called every time a frame is drawn so the function should aim to return as quickly as possible \n    * to avoid hanging the render loop.\n    * \n    * The use-case for this is synchronising external actions to a specfic media source, such as subtitle rendering or \n    * animations on a canvasMediaSource.\n    * \n    * The listeners get passed a reference to the internal MediaSource object and somtimes extra data relevant to that \n    * sepcific actions function (\"seek\" gets the time seeking too, \"render\" gets the shaders rendering parameters).\n    *\n    * @param {String} mediaSourceID - The id of the MediaSource to listen to.\n    * @param {Object} mediaSourceListener - An Object implementing listener functions.\n    * @example\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n    *   ]\n    * }\n    * var canvas = document.getElementById('canvas');\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = playlist;\n    * \n    * var videoListener = {\n    *     render: function(mediaSource, renderParameters){\n    *         //This will get called every frame.\n    *         var time = renderParameters.progress * mediaSource.duration;\n    *         console.log('Progress through ID', mediaSource.id, ':', time);\n    *     },\n    *     seek:function(mediaSource, seekTime){\n    *         //This function will get called on seek\n    *         console.log(\"Seeking ID\", mediaSource.id, \"to :\", seekTime);\n    *     },\n    *     play:function(mediaSource){\n    *         //This function will get called on play\n    *         console.log(\"Plating ID\", mediaSource.id);\n    *     },\n    * }\n    *\n    * videoCompositor.registerMediaSourceListener(\"video1\", videoListener);\n    * videoCompositor.play();\n    *\n    */\n    registerMediaSourceListener(mediaSourceID, mediaSourceListener){\n        if (this._mediaSourceListeners.has(mediaSourceID)){\n            this._mediaSourceListeners.get(mediaSourceID).push(mediaSourceListener);\n        }else{\n            this._mediaSourceListeners.set(mediaSourceID, [mediaSourceListener]);\n        }\n    }\n    /**\n    * This method allows you to remove a listener from a specific MediaSource.\n    *\n    * To use this you must pass in an object which has already been registered using registerMediaSourceListener,\n    * @param {String} mediaSourceID - The id of the MediaSource to remove the listener from.\n    * @param {Object} mediaSourceListener - An Object that has been previously passed in via registerMediaSourceListener. \n    */\n    unregisterMediaSourceListener(mediaSourceID, mediaSourceListener){\n        if (!this._mediaSourceListeners.has(mediaSourceID)){\n            return false;\n        }else{\n            let listenerArray = this._mediaSourceListeners.get(mediaSourceID);\n\n            let index = listenerArray.indexOf(mediaSourceListener);\n            if (index > -1){\n                listenerArray.splice(index, 1);\n            }\n\n            if (this._mediaSources.has(mediaSourceID)){\n                let mediaSourceListnerArray = this._mediaSources.get(mediaSourceID).mediaSourceListeners;\n                index = mediaSourceListnerArray.indexOf(mediaSourceListener);\n                if (index > -1){\n                    mediaSourceListnerArray.splice(index, 1);\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n    * Returns the audio context that was either passed into the constructor or created internally.\n    * @example <caption>Getting an audio context that was passed in</caption>\n    * var audioCtx = new AudioContext();\n    * var videoCompositor = new VideoCompositor(canvas, audioCtx);\n    * \n    * var returnedAudioContext = videoCompositor.getAudioContext();\n    *\n    * //returnedAudioContext and audiotCtx are the same object.\n    * \n    * @example <caption>Getting an AudioContext created internally</caption>\n    * var videoCompositor = new VideoCompositor(canvas); //Don't pass in an audio context\n    *\n    * var audioCtx = videoCompositor.getAudioContext();\n    * //audioCtx was created inside the VideoCompositor constructor\n    *\n    * @return {AudioContext} The audio context used to create any nodes required by calls to getAudioNodeForTrack\n    */\n    getAudioContext(){\n        return this._audioManger.getAudioContext();\n    }\n    \n    /**\n    * Starts the underlying video/image elements pre-loading. Behavior is not guaranteed and depends on how the browser treats video pre-loading under the hood.\n    * @example <caption>Start a playlist pre-loading so it starts playing quicker</caption>\n    * var videoCompositor = new VideoCompositor(canvas);\n    * videoCompositor.playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n    *   ]\n    * }\n    * videoCompositor.preload();\n    * //now when play is called is should start quicker.\n    */\n    preload(){\n        this._playing = true;\n        this._update(0.0);\n        this._playing = false;\n    }\n\n    /**\n    * Gets an audio bus for the given playlist track.\n    *\n    * In some instances you may want to feed the audio output of the media sources from a given track into a web audio API context. This function provides a mechanism for acquiring an audio GainNode which represents a \"bus\" of a given track.\n    *\n    * Note: In order for the media sources on a track to play correctly once you have an AudioNode for the track you must connect the Audio Node to the audio contexts destination (even if you want to mute them you must set the gain to 0 then connect them to the output).\n    * @example <caption>Muting all videos on a single track</caption>\n    * \n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n    *   ]\n    * }\n    * \n    * var audioCtx = new AudioContext();\n    * var canvas = document.getElementById(\"canvas\");\n    * var videoCompositor = new VideoCompositor(canvas, audioCtx);\n    * videoCompositor.playlist = playlist;\n    * var trackGainNode = videoCompositor.getAudioNodeForTrack(playlist.tracks[0]);\n    * trackGainNode.gain.value = 0.0; // Mute the track\n    * \n    * @param {Array} track - this is track which consist of an array object of MediaSourceReferences (typically a track from a playlist object).\n    * @return {GainNode} this is a web audio GainNode which has the output of any audio producing media sources from the passed track played out of it.\n    */\n    getAudioNodeForTrack(track){\n        let audioNode = this._audioManger.createAudioNodeFromTrack(track);\n        return audioNode;\n    }\n\n    _dispatchEvents(evt){\n        //Catch events and pass them on, mangling the detail property so it looks nice in the API\n        for (let i = 0; i < evt.detail.instance._eventMappings.get(evt.type).length; i++){\n            evt.detail.instance._eventMappings.get(evt.type)[i](evt.detail.data);\n        }\n    }\n\n    _getPlaylistPlayingStatusAtTime(playlist, playhead){\n        let toPlay = [];\n        let currentlyPlaying = [];\n        let finishedPlaying = [];\n\n        //itterate tracks\n        for(let i = 0; i < playlist.tracks.length; i++){\n            let track = playlist.tracks[i];\n            for (let j = 0; j < track.length; j++) {\n                let segment = track[j];\n                let segmentEnd = segment.start+segment.duration;\n\n                if (playhead > segmentEnd){\n                    finishedPlaying.push(segment);\n                    continue;\n                }\n                if (playhead > segment.start && playhead < segmentEnd){\n                    currentlyPlaying.push(segment);\n                    continue;\n                }\n                if(playhead <= segment.start){\n                    toPlay.push(segment);\n                    continue;\n                }\n            }\n        }\n\n        return [toPlay, currentlyPlaying, finishedPlaying];\n    }\n\n    _sortMediaSourcesByStartTime(mediaSources){\n        mediaSources.sort(function(a,b){\n            return a.start - b.start;\n        });\n        return mediaSources;\n    }\n\n    _loadMediaSource(mediaSourceReference, onReadyCallback){\n        if (onReadyCallback === undefined) onReadyCallback = function(){};\n        let mediaSourceListeners = [];\n        if (this._mediaSourceListeners.has(mediaSourceReference.id)){\n            mediaSourceListeners = this._mediaSourceListeners.get(mediaSourceReference.id);\n        }\n\n\n        let MediaSourceClass = mediaSourceMapping.get(mediaSourceReference.type);\n        if (MediaSourceClass === undefined){\n            throw {\"error\":5,\"msg\":\"mediaSourceReference \"+mediaSourceReference.id+\" has unrecognized type \"+mediaSourceReference.type, toString:function(){return this.msg;}};\n        }\n        let mediaSource = new MediaSourceClass(mediaSourceReference, this._ctx);\n        mediaSource.onready = onReadyCallback;\n        mediaSource.mediaSourceListeners = mediaSourceListeners;\n        mediaSource.load();\n        this._mediaSources.set(mediaSourceReference.id, mediaSource);\n    }\n\n    _calculateMediaSourcesOverlap(mediaSources){\n        let maxStart = 0.0;\n        let minEnd;\n        //calculate max start time\n        for (var i = 0; i < mediaSources.length; i++) {\n            let mediaSource = mediaSources[i];\n            if (mediaSource.start  > maxStart){\n                maxStart = mediaSource.start;\n            }\n            let end = (mediaSource.start + mediaSource.duration);\n            if (minEnd === undefined || end < minEnd){\n                minEnd = end;\n            }\n        }\n        return [maxStart, minEnd];\n    }\n\n\n    _calculateActiveTransitions(currentlyPlaying, currentTime){\n        if (this._playlist === undefined || this._playing === false) return [];\n        if (this._playlist.transitions === undefined ) return [];\n        \n        //Get the currently playing ID's\n        let currentlyPlayingIDs = [];\n        for (let i = 0; i < currentlyPlaying.length; i++) {\n            currentlyPlayingIDs.push(currentlyPlaying[i].id);\n        }\n\n        let activeTransitions = [];\n\n        //Get the transitions whose video sources are currently playing\n\n\n        let transitionKeys = Object.keys(this._playlist.transitions);\n        for (let i = 0; i < transitionKeys.length; i++){\n            let transitionID = transitionKeys[i];\n\n            let transition = this._playlist.transitions[transitionID];\n            let areInputsCurrentlyPlaying = true;\n            for (let j = 0; j < transition.inputs.length; j++) {\n                let id = transition.inputs[j];\n                if (currentlyPlayingIDs.indexOf(id) === -1){\n                    areInputsCurrentlyPlaying = false;\n                    break;\n                }\n            }\n            if (areInputsCurrentlyPlaying){\n                let activeTransition = {transition:transition, transitionID:transitionID, mediaSources:[]};\n                \n                for(let j = 0; j < transition.inputs.length; j++){\n                    activeTransition.mediaSources.push(this._mediaSources.get(transition.inputs[j]));\n                }\n\n                activeTransitions.push(activeTransition);\n            }\n        }\n\n        //Calculate the progress through the transition\n        for (let i = 0; i < activeTransitions.length; i++) {\n            let mediaSources = activeTransitions[i].mediaSources;\n            let [overlapStart, overlapEnd] = this._calculateMediaSourcesOverlap(mediaSources);\n            let progress = ((currentTime - overlapStart)) / (overlapEnd - overlapStart);\n            activeTransitions[i].progress = progress;\n        }\n\n        return activeTransitions;\n    }\n\n\n    _update(dt){\n        if (this._playlist === undefined || this._playing === false) return;\n\n        let [toPlay, currentlyPlaying, finishedPlaying] = this._getPlaylistPlayingStatusAtTime(this._playlist, this._currentTime);\n        toPlay = this._sortMediaSourcesByStartTime(toPlay);\n\n        //Check if we've finished playing and then stop\n        if (toPlay.length === 0 && currentlyPlaying.length === 0){\n            this.pause();\n            let endedEvent = new CustomEvent('ended', {detail:{data:this.currentTime, instance:this}});\n            this.currentTime = 0;\n            this._canvas.dispatchEvent(endedEvent);\n            return;\n        }\n\n\n        // //Preload mediaSources\n        // for (let i = 0; i < this._mediaSourcePreloadNumber; i++) {\n        //     if (i === toPlay.length) break;\n        //     if (this._mediaSources.has(toPlay[i].id) === false){\n        //         this._loadMediaSource(toPlay[i]);\n        //     }\n        // }\n\n        for (let i = 0; i < toPlay.length; i++) {\n            //if (i === toPlay.length) break;\n            if (!this._mediaSources.has(toPlay[i].id)){\n                if (toPlay[i].start < this._currentTime + this._mediaSourcePreloadLookaheadTime){\n                    this._loadMediaSource(toPlay[i]);\n                }\n            }\n        }\n\n        //Clean-up any mediaSources which have already been played\n        for (let i = 0; i < finishedPlaying.length; i++) {\n            let mediaSourceReference = finishedPlaying[i];\n            if (this._mediaSources.has(mediaSourceReference.id)){\n                let mediaSource = this._mediaSources.get(mediaSourceReference.id);\n                if (mediaSource.start + mediaSource.duration < this._currentTime - this._mediaSourcePostPlayLifetime){\n                    mediaSource.destroy();\n                    this._mediaSources.delete(mediaSourceReference.id);\n                }\n            }\n        }\n\n        //Make sure all mediaSources are ready to play\n        let ready = true;\n        for (let i = 0; i < currentlyPlaying.length; i++) {\n            let mediaSourceID = currentlyPlaying[i].id;\n            //check that currently playing mediaSource exists\n            if (!this._mediaSources.has(mediaSourceID)){\n                //if not load it\n                this._loadMediaSource(currentlyPlaying[i]);\n                ready = false;\n                continue;\n            }\n            if (!this._mediaSources.get(mediaSourceID).isReady()) ready=false;\n        }\n        //if all the sources aren't ready, exit function before rendering or advancing clock.\n        if (ready === false){\n            return;\n        }\n\n\n        //Update the effects\n        this._effectManager.updateEffects(this._playlist.effects);\n\n        //Update the audio\n        this._audioManger.update(this._mediaSources, currentlyPlaying);\n\n        //Play mediaSources on the currently playing queue.\n        currentlyPlaying.reverse(); //reverse the currently playing queue so track 0 renders last\n\n\n        //let activeTransitions = this._calculateActiveTransitions(currentlyPlaying, this._currentTime);\n        this._ctx.viewport(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\n        this._ctx.clear(this._ctx.COLOR_BUFFER_BIT | this._ctx.DEPTH_BUFFER_BIT);\n\n        for (let i = 0; i < currentlyPlaying.length; i++) {\n            let mediaSourceID = currentlyPlaying[i].id;\n            let mediaSource = this._mediaSources.get(mediaSourceID);\n            //We must update the MediaSource object with any changes made to the MediaSourceReference\n            //Currently the only parameters we update are start,duration\n\n            mediaSource.play();\n            let progress = ((this._currentTime - currentlyPlaying[i].start)) / (currentlyPlaying[i].duration);\n            //get the base render parameters\n            let renderParameters = {\"playback_rate\": this._playbackRate ,\"progress\":progress, \"duration\":mediaSource.duration, \"source_resolution\":[mediaSource.width,mediaSource.height], \"output_resolution\":[this._canvas.width, this._canvas.height]};\n            //find the effect associated with the current mediasource\n            let effect = this._effectManager.getEffectForInputId(mediaSourceID);\n            //merge the base parameters with any custom ones\n            for (let key in effect.parameters) {\n                renderParameters[key] = effect.parameters[key];\n            }\n\n            mediaSource.render(effect.program, renderParameters, effect.textures);\n\n        }\n        this._currentTime += dt * this._playbackRate;\n    }\n\n    /**\n    * Calculate the duration of the passed playlist track.\n    *\n    * Will return the time that the last media source in the track stops playing.\n    * @param {Array} track - this is track which consists of an array object of MediaSourceReferences (typically a track from a playlist object).\n    * @return {number} The duration in seconds of the given track.\n    * @example\n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n    *       [{type:\"video\", start:6, duration:4, src:\"video3.mp4\", id:\"video3\"}]\n    *   ]\n    * }\n    * var track0Duration = VideoCompositor.calculateTrackDuration(playlist.tracks[0]);\n    * var track1Duration = VideoCompositor.calculateTrackDuration(playlist.tracks[1]);\n    * //track0Duration === 8\n    * //track1Duration === 10\n    *\n    * @todo Beacuse media source reference are stored in order this could implemented be far quicker.\n    */\n    static calculateTrackDuration(track){\n        let maxPlayheadPosition = 0;\n        for (let j = 0; j < track.length; j++) {\n            let playheadPosition = track[j].start + track[j].duration;\n            if (playheadPosition > maxPlayheadPosition){\n                maxPlayheadPosition = playheadPosition;\n            }\n        }\n        return maxPlayheadPosition;\n    }\n    \n    /**\n    * Calculate the duration of the passed playlist.\n    *\n    * Will return the time that the last media source in the longest track stops playing.\n    * @param {Object} playlist - This is a playlist object.\n    * @return {number} The duration in seconds of the given playlist.\n    * @example\n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n    *       [{type:\"video\", start:6, duration:4, src:\"video3.mp4\", id:\"video3\"}]\n    *   ]\n    * }\n    * var playilstDuration = VideoCompositor.calculateTrackDuration(playlist);\n    * //playlistDuration === 10\n    *\n    */\n    static calculatePlaylistDuration(playlist){\n        let maxTrackDuration = 0;\n\n        for(let i = 0; i < playlist.tracks.length; i++){\n            let track = playlist.tracks[i];\n            let trackDuration = VideoCompositor.calculateTrackDuration(track);\n            if (trackDuration > maxTrackDuration){\n                maxTrackDuration = trackDuration;\n            }\n        }\n\n        return maxTrackDuration;\n    }\n\n\n    /**\n    * Validate that the playlist is correct and playable.\n    *\n    * This static function will analyze a playlist and check for common errors. on encountering an error it will throw an exception. The errors it currently checks for are:\n    *\n    * Error 1. MediaSourceReferences have a unique ID        \n    *\n    * Error 2. The playlist media sources have all the expected properties.\n    *\n    * Error 3. MediaSourceReferences in single track are sequential.\n    *\n    * Error 4. MediaSourceReferences in single track don't overlap\n    *\n    * @param {Object} playlist - This is a playlist object.\n    *\n    * @example\n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:2, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n    *   ]\n    * }\n    * var playilstDuration = VideoCompositor.validatePlaylist(playlist);\n    * //Will throw error 4 becuase mediaSourceReference video1 and video2 overlap by 2 seconds.\n    *\n    * @todo Better coverage of possible errors in a playlist.\n    */\n    static validatePlaylist(playlist){\n        /*     \n        This function validates a passed playlist, making sure it matches a \n        number of properties a playlist must have to be OK.\n\n        * Error 1. MediaSourceReferences have a unique ID        \n        * Error 2. The playlist media sources have all the expected properties.\n        * Error 3. MediaSourceReferences in single track are sequential.\n        * Error 4. MediaSourceReferences in single track don't overlap\n        */\n\n        //Error 1. MediaSourceReferences have a unique ID\n        let IDs = new Map();\n        for (let i = 0; i < playlist.tracks.length; i++) {\n            let track = playlist.tracks[i];\n            for (let j = 0; j < track.length; j++) {\n                let MediaSourceReference = track[j];\n                if (IDs.has(MediaSourceReference.id)){\n                    throw {\"error\":1,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" has a duplicate ID.\", toString:function(){return this.msg;}};\n                }else{\n                    IDs.set(MediaSourceReference.id, true);\n                }\n            }\n        }\n\n\n        //Error 2. The playlist MediaSourceReferences have all the expected properties.\n        for (let i = 0; i < playlist.tracks.length; i++) {\n            let track = playlist.tracks[i];\n            for (let j = 0; j < track.length; j++) {\n                let MediaSourceReference = track[j];\n                if (MediaSourceReference.id === undefined) throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" is missing a id property\", toString:function(){return this.msg;}};\n                if (MediaSourceReference.start === undefined) throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" is missing a start property\", toString:function(){return this.msg;}};\n                if (MediaSourceReference.duration === undefined) throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" is missing a duration property\", toString:function(){return this.msg;}};\n                if (MediaSourceReference.type === undefined) throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" is missing a type property\", toString:function(){return this.msg;}};\n                if (MediaSourceReference.src !== undefined && MediaSourceReference.element !== undefined)throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" has both a src and element, it must have one or the other\", toString:function(){return this.msg;}};\n                if (MediaSourceReference.src === undefined && MediaSourceReference.element === undefined)throw {\"error\":2,\"msg\":\"MediaSourceReference \"+MediaSourceReference.id+\" in track \" +i+\" has neither a src or an element, it must have one or the other\", toString:function(){return this.msg;}};                \n            }\n        }\n\n\n        // Error 3. MediaSourceReferences in single track are sequential.\n        for (let i = 0; i < playlist.tracks.length; i++) {\n            let track = playlist.tracks[i];\n            let time = 0;\n            for (let j = 0; j < track.length; j++) {\n                let MediaSourceReference = track[j];\n                if (MediaSourceReference.start < time){\n                    throw {\"error\":3,\"msg\":\"MediaSourceReferences \"+MediaSourceReference.id+\" in track \" +i+\" starts before previous MediaSourceReference\", toString:function(){return this.msg;}};\n                }\n                time = MediaSourceReference.start;\n            }\n        }        \n\n\n        //Error 4. MediaSourceReferences in single track don't overlap\n        for (let i = 0; i < playlist.tracks.length; i++) {\n            let track = playlist.tracks[i];\n            let previousMediaSourceReference;\n            for (let j = 0; j < track.length; j++) {\n                let MediaSourceReference = track[j];\n                if (previousMediaSourceReference === undefined){\n                    previousMediaSourceReference = MediaSourceReference;\n                    continue;\n                }\n                let previousEnd = previousMediaSourceReference.start + previousMediaSourceReference.duration;\n                let currentStart = MediaSourceReference.start;\n                if (previousEnd > currentStart){\n                    throw {\"error\":4,\"msg\":\"Track MediaSourceReferences overlap. MediaSourceReference \"+previousMediaSourceReference.id+\" in track \" +i+\" finishes after MediaSourceReference \" + MediaSourceReference.id +\" starts.\", toString:function(){return this.msg;}};\n                }\n            }\n        }\n    }\n\n\n    /**\n    * Render a graphical representation of a playlist to a canvas.\n    *\n    * This function is useful for rendering a graphical display of a playlist to check MediaSourceReferences are aligned on tracks as you'd expect. It can also be called in an update loop with the currentTime of a VideoCompositor instance passed in to create a live timeline viewer.\n    *\n    *\n    * @param {Object} playlist - This is a playlist object.\n    * @param {Canvas} canvas - This is the canvas to render to.\n    * @param {number} currentTime - The time at wich to render a playhead.\n    *\n    * @example\n    * var playlist = {\n    *   tracks:[\n    *       [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:2, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n    *   ]\n    * }\n    * var visualisationCanvas = document.getElementById(\"vis-canvas\");\n    * VideoCompositor.renderPlaylist(playlist, visualisationCanvas, 0);\n    *\n    */\n    static renderPlaylist(playlist, canvas, currentTime){\n        let ctx = canvas.getContext('2d');\n        let w = canvas.width;\n        let h = canvas.height;\n        let trackHeight = h / playlist.tracks.length;\n        let playlistDuration = VideoCompositor.calculatePlaylistDuration(playlist);\n        let pixelsPerSecond = w / playlistDuration;\n        let mediaSourceStyle = {\n            \"video\":[\"#572A72\", \"#3C1255\"],\n            \"image\":[\"#7D9F35\", \"#577714\"],\n            \"canvas\":[\"#AA9639\", \"#806D15\"]\n        };\n\n\n        ctx.clearRect(0,0,w,h);\n        ctx.fillStyle = \"#999\";\n        for (let i = 0; i < playlist.tracks.length; i++) {\n            let track = playlist.tracks[i];\n            for (let j = 0; j < track.length; j++) {\n                let mediaSource = track[j];\n                let msW = mediaSource.duration * pixelsPerSecond;\n                let msH = trackHeight;\n                let msX = mediaSource.start * pixelsPerSecond;\n                let msY = trackHeight * i;\n                ctx.fillStyle = mediaSourceStyle[mediaSource.type][j%mediaSourceStyle[mediaSource.type].length];\n                ctx.fillRect(msX,msY,msW,msH);\n                ctx.fill();\n            }\n        }\n\n        if (currentTime !== undefined){\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(currentTime*pixelsPerSecond, 0, 1, h);\n        }\n    }\n\n    static get VertexShaders() {\n        return {\n            DEFAULT: \"\\\n                uniform float progress;\\\n                uniform float duration;\\\n                uniform vec2 source_resolution;\\\n                uniform vec2 output_resolution;\\\n                attribute vec2 a_position;\\\n                attribute vec2 a_texCoord;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main() {\\\n                    v_progress = progress;\\\n                    v_duration = duration;\\\n                    v_source_resolution = source_resolution;\\\n                    v_output_resolution = output_resolution;\\\n                    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\\n                    v_texCoord = a_texCoord;\\\n                }\",\n            OFFSETSCALEINOUT: \"\\\n                uniform float progress;\\\n                uniform float duration;\\\n                uniform vec2 source_resolution;\\\n                uniform vec2 output_resolution;\\\n                uniform float inTime;\\\n                uniform float outTime;\\\n                uniform float scaleX;\\\n                uniform float scaleY;\\\n                uniform float offsetX;\\\n                uniform float offsetY;\\\n                attribute vec2 a_position;\\\n                attribute vec2 a_texCoord;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying float v_inTime;\\\n                varying float v_outTime;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main() {\\\n                    v_progress = progress;\\\n                    v_duration = duration;\\\n                    v_inTime = inTime;\\\n                    v_outTime = outTime;\\\n                    v_source_resolution = source_resolution;\\\n                    v_output_resolution = output_resolution;\\\n                    gl_Position = vec4(vec2(2.0*scaleX,2.0*scaleY)*a_position-vec2(1.0+offsetX, 1.0+offsetY), 0.0, 1.0);\\\n                    v_texCoord = a_texCoord;\\\n                }\",\n            INOUT: \"\\\n                uniform float progress;\\\n                uniform float duration;\\\n                uniform vec2 source_resolution;\\\n                uniform vec2 output_resolution;\\\n                uniform float inTime;\\\n                uniform float outTime;\\\n                attribute vec2 a_position;\\\n                attribute vec2 a_texCoord;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying float v_inTime;\\\n                varying float v_outTime;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main() {\\\n                    v_progress = progress;\\\n                    v_duration = duration;\\\n                    v_inTime = inTime;\\\n                    v_outTime = outTime;\\\n                    v_source_resolution = source_resolution;\\\n                    v_output_resolution = output_resolution;\\\n                    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\\n                    v_texCoord = a_texCoord;\\\n                }\",\n            OFFSETSCALE:\"\\\n                uniform float progress;\\\n                uniform float duration;\\\n                uniform vec2 source_resolution;\\\n                uniform vec2 output_resolution;\\\n                uniform float scaleX;\\\n                uniform float scaleY;\\\n                uniform float offsetX;\\\n                uniform float offsetY;\\\n                attribute vec2 a_position;\\\n                attribute vec2 a_texCoord;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main() {\\\n                    v_progress = progress;\\\n                    v_duration = duration;\\\n                    v_source_resolution = source_resolution;\\\n                    v_output_resolution = output_resolution;\\\n                    gl_Position = vec4(vec2(2.0*scaleX,2.0*scaleY)*a_position-vec2(1.0+offsetX, 1.0+offsetY), 0.0, 1.0);\\\n                    v_texCoord = a_texCoord;\\\n                }\"\n        }\n    }\n    static get FragmentShaders(){\n        return {\n            DEFAULT:\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_duration;\\\n                    varying vec2 v_source_resolution;\\\n                    varying vec2 v_output_resolution;\\\n                    void main(){\\\n                        gl_FragColor = texture2D(u_image, v_texCoord);\\\n                    }\",\n            PRESERVEASPECTRATIO:\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_duration;\\\n                    varying vec2 v_source_resolution;\\\n                    varying vec2 v_output_resolution;\\\n                    void main(){\\\n                        float scale = 1.0;\\\n                        float source_aspect_ratio = v_source_resolution[0]/v_source_resolution[1];\\\n                        float output_aspect_ratio = v_output_resolution[0]/v_output_resolution[1];\\\n                        if(output_aspect_ratio > source_aspect_ratio){\\\n                            scale = v_output_resolution[1]/v_source_resolution[1];\\\n                        } else {\\\n                            scale = v_output_resolution[0]/v_source_resolution[0];\\\n                        };\\\n                        vec2 source_resolution = v_source_resolution * scale;\\\n                        vec2 oCord = vec2(v_texCoord[0] * v_output_resolution[0], v_texCoord[1] * v_output_resolution[1]);\\\n                        vec2 sCord = vec2(oCord[0] - (v_output_resolution[0]/2.0 - source_resolution[0]/2.0), oCord[1] - (v_output_resolution[1]/2.0 - source_resolution[1]/2.0));\\\n                        if (sCord[0] < 0.0 || sCord[0] > source_resolution[0]||sCord[1] < 0.0 || sCord[1] > source_resolution[1]){\\\n                            gl_FragColor = vec4(0.0,0.0,0.0,0.0);\\\n                        }else{\\\n                            gl_FragColor = texture2D(u_image, (sCord/source_resolution));\\\n                        }\\\n                    }\",\n            PRESERVEASPECTRATIOFILL:\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_duration;\\\n                    varying vec2 v_source_resolution;\\\n                    varying vec2 v_output_resolution;\\\n                    void main(){\\\n                        float scale = 1.0;\\\n                        float source_aspect_ratio = v_source_resolution[0]/v_source_resolution[1];\\\n                        float output_aspect_ratio = v_output_resolution[0]/v_output_resolution[1];\\\n                        if(output_aspect_ratio > source_aspect_ratio){\\\n                            scale = v_output_resolution[1]/v_source_resolution[1];\\\n                        } else {\\\n                            scale = v_output_resolution[0]/v_source_resolution[0];\\\n                        };\\\n                        vec2 source_resolution = v_source_resolution * scale;\\\n                        vec2 oCord = vec2(v_texCoord[0] * v_output_resolution[0], v_texCoord[1] * v_output_resolution[1]);\\\n                        vec2 sCord = vec2(oCord[0] - (v_output_resolution[0]/2.0 - source_resolution[0]/2.0), oCord[1] - (v_output_resolution[1]/2.0 - source_resolution[1]/2.0));\\\n                        gl_FragColor = texture2D(u_image, (sCord/source_resolution));\\\n                    }\",\n            MONOCHROME: \"\\\n                precision mediump float;\\\n                uniform sampler2D u_image;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main(){\\\n                    vec4 pixel = texture2D(u_image, v_texCoord);\\\n                    float avg = (pixel[0]*0.2125 + pixel[1]*0.7154 + pixel[2]*0.0721)/3.0;\\\n                    pixel = vec4(avg*1.5, avg*1.5, avg*1.5, pixel[3]);\\\n                    gl_FragColor = pixel;\\\n                }\",\n            SEPIA: \"\\\n                precision mediump float;\\\n                uniform sampler2D u_image;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main(){\\\n                    vec4 pixel = texture2D(u_image, v_texCoord);\\\n                    float avg = (pixel[0]*0.2125 + pixel[1]*0.7154 + pixel[2]*0.0721)/3.0;\\\n                    pixel = vec4(avg*2.0, avg*1.6, avg, pixel[3]);\\\n                    gl_FragColor = pixel;\\\n                }\",\n            BITCRUNCH: \"\\\n                precision mediump float;\\\n                uniform sampler2D u_image;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main(){\\\n                    vec4 pixel = texture2D(u_image, v_texCoord);\\\n                    pixel = floor(pixel*vec4(8.0,8.0,8.0,8.0));\\\n                    pixel = pixel/vec4(8.0,8.0,8.0,8.0);\\\n                    gl_FragColor = pixel*vec4(1.0,1.0,1.0,1.0);\\\n                }\",\n            \"FADEINOUT\": \"\\\n                precision mediump float;\\\n                uniform sampler2D u_image;\\\n                varying vec2 v_texCoord;\\\n                varying float v_progress;\\\n                varying float v_duration;\\\n                varying float v_inTime;\\\n                varying float v_outTime;\\\n                varying vec2 v_source_resolution;\\\n                varying vec2 v_output_resolution;\\\n                void main(){\\\n                    float alpha = 1.0;\\\n                    if (v_progress * v_duration < v_inTime){\\\n                        alpha = (v_progress * v_duration)/(v_inTime+0.001);\\\n                    }\\\n                    if ((v_progress * v_duration) > (v_duration - v_outTime)){\\\n                        alpha = (v_outTime - ((v_progress * v_duration) - (v_duration - v_outTime)))/(v_outTime+0.001);\\\n                    }\\\n                    gl_FragColor = texture2D(u_image, v_texCoord) * vec4(1.0,1.0,1.0,alpha);\\\n                }\",\n            \"LUTSQAURE64X64\":\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    uniform sampler2D lut;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_duration;\\\n                    varying vec2 v_source_resolution;\\\n                    varying vec2 v_output_resolution;\\\n                    void main(){\\\n                        vec4 original_color = texture2D(u_image, v_texCoord);\\\n                        original_color = clamp(original_color, vec4(0.01,0.01,0.01,0.01), vec4(0.99,0.99,0.99,0.99));\\\n                        vec2 red_offset = vec2(original_color[0]/8.0 ,0.0);\\\n                        vec2 green_offset = vec2(0.0,(1.0/8.0)-(original_color[1]/8.0));\\\n                        \\\n                        float b = floor((original_color[2] * 63.0) + 0.5);\\\n                        float b_x = mod(b, 8.0);\\\n                        float b_y = floor((b / 8.0) + 0.5);\\\n                        vec2 blue_offset = vec2(b_x/8.0, 1.0 - b_y/8.0);\\\n                        vec4 lut_color = texture2D(lut, (blue_offset + red_offset + green_offset));\\\n                        gl_FragColor = lut_color;\\\n                    }\"\n        }\n    }\n\n\n    static get Effects(){\n        return {\n            \"OFFSETSCALE\" :{\n                \"fragmentShader\":VideoCompositor.FragmentShaders.DEFAULT,\n                \"vertexShader\": VideoCompositor.VertexShaders.OFFSETSCALE,\n                \"defaultParameters\":{\n                    \"scaleX\":1.0,\n                    \"scaleY\":1.0,\n                    \"offsetX\":0.0,\n                    \"offsetY\":0.0\n                }\n            },\n            \"MONOCHROME\":{\n                \"fragmentShader\": VideoCompositor.FragmentShaders.MONOCHROME\n            },\n            \"SEPIA\":{\n                \"fragmentShader\": VideoCompositor.FragmentShaders.SEPIA\n            },\n            \"BITCRUNCH\":{\n                \"fragmentShader\":VideoCompositor.FragmentShaders.BITCRUNCH\n            },\n            //Green screen color =  r = 62, g = 178, b = 31\n            //Normalised         = r = 0.243, g= 0.698, b = 0.122\n            \"GREENSCREENMAD\":{\n                \"fragmentShader\":\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    void main(){\\\n                        vec4 pixel = texture2D(u_image, v_texCoord);\\\n                        float alpha = 1.0;\\\n                        float r = pixel[0];\\\n                        float g = pixel[1];\\\n                        float b = pixel[2];\\\n                        float y =  0.299*r + 0.587*g + 0.114*b;\\\n                        float u = -0.147*r - 0.289*g + 0.436*b;\\\n                        float v =  0.615*r - 0.515*g - 0.100*b;\\\n                        ;\\\n                        alpha = (v+u)*10.0 +2.0;\\\n                        \\\n                        pixel = floor(pixel*vec4(2.0,2.0,2.0,2.0));\\\n                        pixel = pixel/vec4(2.0,2.0,2.0,2.0);\\\n                        pixel = vec4(pixel[2]*2.0, pixel[1]*2.0, pixel[0]*2.0, alpha);\\\n                        gl_FragColor = pixel;\\\n                    }\"\n            },\n            \"GREENSCREEN\":{\n                \"fragmentShader\":\"\\\n                    precision mediump float;\\\n                    uniform sampler2D u_image;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_yUpperThreshold;\\\n                    varying float v_yLowerThreshold;\\\n                    void main(){\\\n                        vec4 pixel = texture2D(u_image, v_texCoord);\\\n                        float alpha = 1.0;\\\n                        float r = pixel[0];\\\n                        float g = pixel[1];\\\n                        float b = pixel[2];\\\n                        float y =  0.299*r + 0.587*g + 0.114*b;\\\n                        float u = -0.147*r - 0.289*g + 0.436*b;\\\n                        float v =  0.615*r - 0.515*g - 0.100*b;\\\n                        if (y > v_yLowerThreshold && y < v_yUpperThreshold){\\\n                            alpha = (v+u)*40.0 +2.0;\\\n                        }\\\n                        pixel = vec4(pixel[0], pixel[1], pixel[2], alpha);\\\n                        gl_FragColor = pixel;\\\n                    }\",\n                \"vertexShader\": \"\\\n                    uniform float progress;\\\n                    uniform float duration;\\\n                    uniform float yLowerThreshold;\\\n                    uniform float yUpperThreshold;\\\n                    uniform vec2 source_resolution;\\\n                    uniform vec2 output_resolution;\\\n                    attribute vec2 a_position;\\\n                    attribute vec2 a_texCoord;\\\n                    varying vec2 v_texCoord;\\\n                    varying float v_progress;\\\n                    varying float v_duration;\\\n                    varying float v_yLowerThreshold;\\\n                    varying float v_yUpperThreshold;\\\n                    varying vec2 v_source_resolution;\\\n                    varying vec2 v_output_resolution;\\\n                    void main() {\\\n                        v_progress = progress;\\\n                        v_duration = duration;\\\n                        v_yLowerThreshold = yLowerThreshold;\\\n                        v_yUpperThreshold = yUpperThreshold;\\\n                        v_source_resolution = source_resolution;\\\n                        v_output_resolution = output_resolution;\\\n                        gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\\n                        v_texCoord = a_texCoord;\\\n                    }\",\n                    \"defaultParameters\":{\n                        \"yLowerThreshold\":0.2,\n                        \"yUpperThreshold\":0.8\n                    }\n            },\n            \"FADEINOUT\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":1.0,\n                    \"outTime\":1.0\n                }\n            },\n            \"FADEINOUT1SEC\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":1.0,\n                    \"outTime\":1.0\n                }\n            },\n            \"FADEINOUT2SEC\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":2.0,\n                    \"outTime\":2.0\n                }\n            },\n            \"FADEIN1SEC\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":1.0,\n                    \"outTime\":0.0\n                }\n            },\n            \"FADEIN2SEC\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":2.0,\n                    \"outTime\":0.0\n                }\n            },\n            \"FADEOUT1SEC\": {\n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":0.0,\n                    \"outTime\":1.0\n                }\n            },\n            \"FADEOUT2SEC\": {            \n                \"fragmentShader\":VideoCompositor.FragmentShaders.FADEINOUT,\n                \"vertexShader\": VideoCompositor.VertexShaders.INOUT,\n                \"defaultParameters\":{\n                    \"inTime\":0.0,\n                    \"outTime\":2.0\n                        }\n                },\n            \"LUTSQAURE64X64\":{\n                \"fragmentShader\": VideoCompositor.FragmentShaders.LUTSQAURE64X64,\n            }\n        };\n    }\n}\n\nexport default VideoCompositor;"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "updateables",
    "memberof": "src/main.js",
    "longname": "src/main.js~updateables",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mediaSourceMapping",
    "memberof": "src/main.js",
    "longname": "src/main.js~mediaSourceMapping",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "Map"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "registerUpdateable",
    "memberof": "src/main.js",
    "longname": "src/main.js~registerUpdateable",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "updateable",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/main.js",
    "longname": "src/main.js~update",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "VideoCompositor",
    "memberof": "src/main.js",
    "longname": "src/main.js~VideoCompositor",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": "VideoCompositor",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#constructor",
    "access": null,
    "description": "Instantiate the VideoCompositor using the passed canvas to render too.\n\nYou can also pass an AudioContext for use when calling getAudioNodeForTrack. If one is not provided a context will be created internally and be accessible via the getAudioContext function.",
    "examples": [
      "\nvar canvas = document.getElementById('canvas');\nvar audioCtx = new AudioContext();\nvar videoCompositor = new VideoCompositor(canvas, audioCtx);"
    ],
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "The canvas element to render too."
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "audioCtx",
        "description": "The AudioContext to create AudioNode's with."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_canvas",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_canvas",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ctx",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_ctx",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playing",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playing",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSources",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSources",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSourcePreloadLookaheadTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSourcePreloadLookaheadTime",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSourcePostPlayLifetime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSourcePostPlayLifetime",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playlist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playlist",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eventMappings",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_eventMappings",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSourceListeners",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSourceListeners",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_max_number_of_textures",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_max_number_of_textures",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_effectManager",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_effectManager",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_audioManger",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_audioManger",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_currentTime",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playbackRate",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playbackRate",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "duration",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#duration",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "preloadTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#preloadTime",
    "access": null,
    "description": "Sets how far in the future to look for preloading mediasources.",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSourcePreloadLookaheadTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSourcePreloadLookaheadTime",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "preloadTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#preloadTime",
    "access": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "postPlayTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#postPlayTime",
    "access": null,
    "description": "Sets how long mediasources will exist for after they have been .",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mediaSourcePostPlayLifetime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_mediaSourcePostPlayLifetime",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "postPlayTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#postPlayTime",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "playbackRate",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#playbackRate",
    "access": null,
    "description": "Sets the playback rate of the video compositor. Msut be greater than 0.",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvideoCompositor.playbackRate = 2.0; //Play at double speed\nvideoCompositor.play();"
    ],
    "lineNumber": 102,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playbackRate",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playbackRate",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "playbackRate",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#playbackRate",
    "access": null,
    "description": "Gets the playback rate.",
    "examples": [
      "var canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nconsole.log(videoCompositor. playbackRate); // will print 1.0."
    ],
    "lineNumber": 118,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#currentTime",
    "access": null,
    "description": "Sets the current time through the playlist.\n\nSetting this is how you seek through the content. Should be frame accurate, but probably slow.",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvideoCompositor.currentTime = 3; //Skip three seconds in.\nvideoCompositor.play();"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "The time to seek to in seconds."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_currentTime",
    "access": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#currentTime",
    "access": null,
    "description": "Get how far through the playlist has been played.\n\nGetting this value will give the current playhead position. Can be used for updating timelines.",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvar time = videoCompositor.currentTime;\n//time === 0"
    ],
    "lineNumber": 214,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The time in seconds through the current playlist."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "playlist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#playlist",
    "access": null,
    "description": "Set the playlist object to be played.\n\nPlaylist objects describe a sequence of media sources to be played along with effects to be applied to them. They can be modified as they are being played to create dynamic or user customizable content.\n\nAt the top level playlist consist of tracks and effects. A track is an array of MediaSourceReferences. MediaSourceReference are an object which describe a piece of media to be played, the three fundamental MediaSourceRefernce types are \"video\", \"image\", and \"canvas\". Internally MediaSoureReferences are used to create MediaSources which are object that contain the underlying HTML element as well as handling loading and rendering of that element ot the output canvas.\n\nThe order in which simultaneous individual tracks get rendered is determined by there index in the overall tracks list. A track at index 0 will be rendered after a track at index 1.\n\nEffects are objects consisting of GLSL vertex and fragment shaders, and a list of MediaSource ID's for them to be applied to.\nEffects get applied independently to any MediaSources in their input list.",
    "examples": [
      "<caption>A simple playlist with a single track of a single 4 second video</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video.mp4\", id:\"video\"}]\n  ]\n}\nvar canvas = document.getElementById(\"canvas\");\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvideoCompositor.play();",
      "<caption>Playing the first 4 seconds of two videos, one after the other</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video.mp4\", id:\"video\"}, {type:\"video\", start:4, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n  ]\n}",
      "<caption>Playing a 4 second segment from within a video (not the use of sourceStart)</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, sourceStart:10, duration:4, src:\"video.mp4\", id:\"video\"}]\n  ]\n}",
      "<caption>A playlist with a 4 second video with a greenscreen effect applied rendered over a background image</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:10, src:\"video.mp4\", id:\"gs-video\"}],\n      [{type:\"image\", start:0, duration:10, src:\"background.png\", id:\"background\"}]\n  ]\n  effects:{\n      \"green-screen\":{                                  //A unique ID for this effect.\n          \"inputs\":[\"gs-video\"],                        //The id of the video to apply the effect to.\n          \"effect\": VideoCompositor.Effects.GREENSCREEN //Use the built-in greenscreen effect shader.\n      }\n  }\n}",
      "<caption>A pseudo 2 second cross-fade between two videos.</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:10, src:\"video1.mp4\", id:\"video1\"}],\n      [                                                  {type:\"video\", start:8, duration:10, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n  effects:{\n      \"fade-out\":{                                      //A unique ID for this effect.\n          \"inputs\":[\"video1\"],                          //The id of the video to apply the effect to.\n          \"effect\": VideoCompositor.Effects.FADEOUT2SEC //Use the built-in fade-out effect shader.\n      },\n      \"fade-in\":{                                      //A unique ID for this effect.\n          \"inputs\":[\"video2\"],                          //The id of the video to apply the effect to.\n          \"effect\": VideoCompositor.Effects.FADEIN2SEC //Use the built-in fade-in effect shader.\n      }\n  }\n}"
    ],
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "playlist",
        "description": "The playlist object to be played."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "duration",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#duration",
    "access": null,
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playlist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playlist",
    "access": null,
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#currentTime",
    "access": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "playlist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#playlist",
    "access": null,
    "description": "Get the playlist object.",
    "lineNumber": 310,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The playlist object"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#play",
    "access": null,
    "description": "Play the playlist. If a pause() has been called previously playback will resume from that point.",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvideoCompositor.play();"
    ],
    "lineNumber": 328,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playing",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playing",
    "access": null,
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pause",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#pause",
    "access": null,
    "description": "Pause playback of the playlist. Call play() to resume playing.",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\nvideoCompositor.play();\n\nsetTimeout(videoCompositor.pause, 3000); //pause after 3 seconds"
    ],
    "lineNumber": 353,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playing",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playing",
    "access": null,
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEventListener",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#addEventListener",
    "access": null,
    "description": "This adds event listeners to the video compositor. Events directed at the underlying canvas are transparently \npassed through, While events that target a video like element are handled within the VideoCompositor. Currently \nthe VideoCompositor only handles a limited number of video like events (\"play\", \"pause\", \"ended\").",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\n\nvideoCompositor.addEventListener(\"play\", function(){console.log(\"Started playing\")});\nvideoCompositor.addEventListener(\"pause\", function(){console.log(\"Paused\")});\nvideoCompositor.addEventListener(\"ended\", function(){console.log(\"Finished playing\")});\n\nvideoCompositor.play();"
    ],
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of event to listen to."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "The Function to be called for the given event."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeEventListener",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#removeEventListener",
    "access": null,
    "description": "This removes event listeners from the video compositor that were added using addEventListener. ",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\n\nvar playingCallback = function(){console.log(\"playing\");};\nvideoCompositor.addEventListener(\"play\", playingCallback);\n\nvideoCompositor.play();\n\nvideoCompositor.removeEventListener(\"play\", playingCallback);"
    ],
    "lineNumber": 424,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of event to remove."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "The Function to be removed for the given event."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerMediaSourceListener",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#registerMediaSourceListener",
    "access": null,
    "description": "This method allows you to create a listeners for events on a specific MediaSource.\n\nTo use this you must pass an object which has one or more the following function properties: play, pause, seek, \nisReady, load, destroy, render.\n\nThese functions get called when the correspoinding action on the MediaSource happen. In the case of the render \nlistener it will be called every time a frame is drawn so the function should aim to return as quickly as possible \nto avoid hanging the render loop.\n\nThe use-case for this is synchronising external actions to a specfic media source, such as subtitle rendering or \nanimations on a canvasMediaSource.\n\nThe listeners get passed a reference to the internal MediaSource object and somtimes extra data relevant to that \nsepcific actions function (\"seek\" gets the time seeking too, \"render\" gets the shaders rendering parameters).",
    "examples": [
      "\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n  ]\n}\nvar canvas = document.getElementById('canvas');\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = playlist;\n\nvar videoListener = {\n    render: function(mediaSource, renderParameters){\n        //This will get called every frame.\n        var time = renderParameters.progress * mediaSource.duration;\n        console.log('Progress through ID', mediaSource.id, ':', time);\n    },\n    seek:function(mediaSource, seekTime){\n        //This function will get called on seek\n        console.log(\"Seeking ID\", mediaSource.id, \"to :\", seekTime);\n    },\n    play:function(mediaSource){\n        //This function will get called on play\n        console.log(\"Plating ID\", mediaSource.id);\n    },\n}\n\nvideoCompositor.registerMediaSourceListener(\"video1\", videoListener);\nvideoCompositor.play();"
    ],
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaSourceID",
        "description": "The id of the MediaSource to listen to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaSourceListener",
        "description": "An Object implementing listener functions."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregisterMediaSourceListener",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#unregisterMediaSourceListener",
    "access": null,
    "description": "This method allows you to remove a listener from a specific MediaSource.\n\nTo use this you must pass in an object which has already been registered using registerMediaSourceListener,",
    "lineNumber": 500,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaSourceID",
        "description": "The id of the MediaSource to remove the listener from."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaSourceListener",
        "description": "An Object that has been previously passed in via registerMediaSourceListener."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAudioContext",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#getAudioContext",
    "access": null,
    "description": "Returns the audio context that was either passed into the constructor or created internally.",
    "examples": [
      "<caption>Getting an audio context that was passed in</caption>\nvar audioCtx = new AudioContext();\nvar videoCompositor = new VideoCompositor(canvas, audioCtx);\n\nvar returnedAudioContext = videoCompositor.getAudioContext();\n\n//returnedAudioContext and audiotCtx are the same object.",
      "<caption>Getting an AudioContext created internally</caption>\nvar videoCompositor = new VideoCompositor(canvas); //Don't pass in an audio context\n\nvar audioCtx = videoCompositor.getAudioContext();\n//audioCtx was created inside the VideoCompositor constructor"
    ],
    "lineNumber": 540,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AudioContext"
      ],
      "spread": false,
      "description": "The audio context used to create any nodes required by calls to getAudioNodeForTrack"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "preload",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#preload",
    "access": null,
    "description": "Starts the underlying video/image elements pre-loading. Behavior is not guaranteed and depends on how the browser treats video pre-loading under the hood.",
    "examples": [
      "<caption>Start a playlist pre-loading so it starts playing quicker</caption>\nvar videoCompositor = new VideoCompositor(canvas);\nvideoCompositor.playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"}]\n  ]\n}\nvideoCompositor.preload();\n//now when play is called is should start quicker."
    ],
    "lineNumber": 556,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playing",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playing",
    "access": null,
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_playing",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_playing",
    "access": null,
    "description": null,
    "lineNumber": 559,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAudioNodeForTrack",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#getAudioNodeForTrack",
    "access": null,
    "description": "Gets an audio bus for the given playlist track.\n\nIn some instances you may want to feed the audio output of the media sources from a given track into a web audio API context. This function provides a mechanism for acquiring an audio GainNode which represents a \"bus\" of a given track.\n\nNote: In order for the media sources on a track to play correctly once you have an AudioNode for the track you must connect the Audio Node to the audio contexts destination (even if you want to mute them you must set the gain to 0 then connect them to the output).",
    "examples": [
      "<caption>Muting all videos on a single track</caption>\n\nvar playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}]\n  ]\n}\n\nvar audioCtx = new AudioContext();\nvar canvas = document.getElementById(\"canvas\");\nvar videoCompositor = new VideoCompositor(canvas, audioCtx);\nvideoCompositor.playlist = playlist;\nvar trackGainNode = videoCompositor.getAudioNodeForTrack(playlist.tracks[0]);\ntrackGainNode.gain.value = 0.0; // Mute the track"
    ],
    "lineNumber": 586,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "track",
        "description": "this is track which consist of an array object of MediaSourceReferences (typically a track from a playlist object)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GainNode"
      ],
      "spread": false,
      "description": "this is a web audio GainNode which has the output of any audio producing media sources from the passed track played out of it."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_dispatchEvents",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_dispatchEvents",
    "access": null,
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getPlaylistPlayingStatusAtTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_getPlaylistPlayingStatusAtTime",
    "access": null,
    "description": null,
    "lineNumber": 598,
    "undocument": true,
    "params": [
      {
        "name": "playlist",
        "types": [
          "*"
        ]
      },
      {
        "name": "playhead",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_sortMediaSourcesByStartTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_sortMediaSourcesByStartTime",
    "access": null,
    "description": null,
    "lineNumber": 628,
    "undocument": true,
    "params": [
      {
        "name": "mediaSources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadMediaSource",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_loadMediaSource",
    "access": null,
    "description": null,
    "lineNumber": 635,
    "undocument": true,
    "params": [
      {
        "name": "mediaSourceReference",
        "types": [
          "*"
        ]
      },
      {
        "name": "onReadyCallback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_calculateMediaSourcesOverlap",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_calculateMediaSourcesOverlap",
    "access": null,
    "description": null,
    "lineNumber": 654,
    "undocument": true,
    "params": [
      {
        "name": "mediaSources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_calculateActiveTransitions",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_calculateActiveTransitions",
    "access": null,
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "params": [
      {
        "name": "currentlyPlaying",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_update",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_update",
    "access": null,
    "description": null,
    "lineNumber": 723,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#currentTime",
    "access": null,
    "description": null,
    "lineNumber": 733,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_currentTime",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor#_currentTime",
    "access": null,
    "description": null,
    "lineNumber": 821,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "calculateTrackDuration",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.calculateTrackDuration",
    "access": null,
    "description": "Calculate the duration of the passed playlist track.\n\nWill return the time that the last media source in the track stops playing.",
    "examples": [
      "var playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n      [{type:\"video\", start:6, duration:4, src:\"video3.mp4\", id:\"video3\"}]\n  ]\n}\nvar track0Duration = VideoCompositor.calculateTrackDuration(playlist.tracks[0]);\nvar track1Duration = VideoCompositor.calculateTrackDuration(playlist.tracks[1]);\n//track0Duration === 8\n//track1Duration === 10"
    ],
    "lineNumber": 844,
    "todo": [
      "Beacuse media source reference are stored in order this could implemented be far quicker."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "track",
        "description": "this is track which consists of an array object of MediaSourceReferences (typically a track from a playlist object)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The duration in seconds of the given track."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "calculatePlaylistDuration",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.calculatePlaylistDuration",
    "access": null,
    "description": "Calculate the duration of the passed playlist.\n\nWill return the time that the last media source in the longest track stops playing.",
    "examples": [
      "var playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:4, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n      [{type:\"video\", start:6, duration:4, src:\"video3.mp4\", id:\"video3\"}]\n  ]\n}\nvar playilstDuration = VideoCompositor.calculateTrackDuration(playlist);\n//playlistDuration === 10"
    ],
    "lineNumber": 872,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "playlist",
        "description": "This is a playlist object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The duration in seconds of the given playlist."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "validatePlaylist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.validatePlaylist",
    "access": null,
    "description": "Validate that the playlist is correct and playable.\n\nThis static function will analyze a playlist and check for common errors. on encountering an error it will throw an exception. The errors it currently checks for are:\n\nError 1. MediaSourceReferences have a unique ID        \n\nError 2. The playlist media sources have all the expected properties.\n\nError 3. MediaSourceReferences in single track are sequential.\n\nError 4. MediaSourceReferences in single track don't overlap",
    "examples": [
      "var playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:2, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n  ]\n}\nvar playilstDuration = VideoCompositor.validatePlaylist(playlist);\n//Will throw error 4 becuase mediaSourceReference video1 and video2 overlap by 2 seconds."
    ],
    "lineNumber": 913,
    "todo": [
      "Better coverage of possible errors in a playlist."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "playlist",
        "description": "This is a playlist object."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "renderPlaylist",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.renderPlaylist",
    "access": null,
    "description": "Render a graphical representation of a playlist to a canvas.\n\nThis function is useful for rendering a graphical display of a playlist to check MediaSourceReferences are aligned on tracks as you'd expect. It can also be called in an update loop with the currentTime of a VideoCompositor instance passed in to create a live timeline viewer.",
    "examples": [
      "var playlist = {\n  tracks:[\n      [{type:\"video\", start:0, duration:4, src:\"video1.mp4\", id:\"video1\"},{type:\"video\", start:2, duration:4, src:\"video2.mp4\", id:\"video2\"}],\n  ]\n}\nvar visualisationCanvas = document.getElementById(\"vis-canvas\");\nVideoCompositor.renderPlaylist(playlist, visualisationCanvas, 0);"
    ],
    "lineNumber": 1008,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "playlist",
        "description": "This is a playlist object."
      },
      {
        "nullable": null,
        "types": [
          "Canvas"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "This is the canvas to render to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentTime",
        "description": "The time at wich to render a playhead."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "VertexShaders",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.VertexShaders",
    "access": null,
    "description": null,
    "lineNumber": 1044,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "FragmentShaders",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.FragmentShaders",
    "access": null,
    "description": null,
    "lineNumber": 1148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "Effects",
    "memberof": "src/main.js~VideoCompositor",
    "longname": "src/main.js~VideoCompositor.Effects",
    "access": null,
    "description": null,
    "lineNumber": 1294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "videoCompositor",
    "memberof": "src/main.js",
    "longname": "src/main.js~videoCompositor",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/main.js",
    "importStyle": "videoCompositor",
    "description": null,
    "lineNumber": 1458,
    "undocument": true,
    "type": {
      "types": [
        "src/main.js~VideoCompositor"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sources/canvassource.js",
    "memberof": null,
    "longname": "src/sources/canvassource.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "//Matthew Shotton, R&D User Experince,© BBC 2015\nimport MediaSource from \"./mediasource\";\n\nclass CanvasSource extends MediaSource{\n    /**\n    * Canvas playback source. Inherits from MediaSource \n    *\n    * A CanvasSource is the manifestation of a mediaSourceReference from a playlist object which has type \"canvas\". \n    * \n    * A CanvasSource exists for a period slightly before a CanvasSource is to play in order to give it time to preload and\n    * is destroyed as soon as the CanvasSource has finished playing.\n    *\n    * @param {Object} properties - An object with the following attributes: id, duration, start, and element. \n    * Where src is the URL of a video, or element is a DOM Video element.\n    * \n    * @param {WebGLContext} gl - a webGl context to render too.\n    */\n    constructor(properties, gl){\n        super(properties, gl);\n        this.width = properties.width;\n        this.height = properties.height;\n    }\n    /**\n    * Set the CanvasSource playing.\n    */\n    play(){\n        super.play();\n    }\n    /**\n    * Seek to playlist time and do something appropriate with this CavnasSource. This can effect shaders applied to this \n    * canvas and any MediaSourceListeners listening to the Id of this source.\n    * @param {number} seekTime - The time to seek too, this is the overall time for the whole playlist.\n    */\n    seek(time){\n        super.seek(time);\n    }\n    /**\n    * Pause the CanvasSource if it is playing.\n    */\n    pause(){\n        super.pause();\n    }\n    /**\n    * Set the CanvasSource loading, when it's ready isReady() will return true.\n    */\n    load(){\n        //check if we're using an already instatiated element, if so don't do anything.\n        if (super.load()){\n            this.seek(0);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.element);\n            this.ready = true;\n            this.width = this.element.width;\n            this.height = this.element.height;\n            this.onready(this);\n            return;\n        }\n\n\n        //otherwise begin the loading process for this mediaSource\n        this.element = document.createElement(\"canvas\");\n        this.element.width = this.width;\n        this.element.height = this.height;\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.element);\n        this.ready = true;\n        this.onready(this);\n    }\n    render(program,  renderParameters, textures){\n        super.render(program,  renderParameters, textures);\n    }\n}\n\nexport default CanvasSource;"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CanvasSource",
    "memberof": "src/sources/canvassource.js",
    "longname": "src/sources/canvassource.js~CanvasSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/canvassource.js",
    "importStyle": "CanvasSource",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/sources/mediasource~MediaSource"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#constructor",
    "access": null,
    "description": "Canvas playback source. Inherits from MediaSource \n\nA CanvasSource is the manifestation of a mediaSourceReference from a playlist object which has type \"canvas\". \n\nA CanvasSource exists for a period slightly before a CanvasSource is to play in order to give it time to preload and\nis destroyed as soon as the CanvasSource has finished playing.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "An object with the following attributes: id, duration, start, and element. \nWhere src is the URL of a video, or element is a DOM Video element."
      },
      {
        "nullable": null,
        "types": [
          "WebGLContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "a webGl context to render too."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#width",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#height",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#play",
    "access": null,
    "description": "Set the CanvasSource playing.",
    "lineNumber": 26,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "seek",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#seek",
    "access": null,
    "description": "Seek to playlist time and do something appropriate with this CavnasSource. This can effect shaders applied to this \ncanvas and any MediaSourceListeners listening to the Id of this source.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seekTime",
        "description": "The time to seek too, this is the overall time for the whole playlist."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pause",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#pause",
    "access": null,
    "description": "Pause the CanvasSource if it is playing.",
    "lineNumber": 40,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#load",
    "access": null,
    "description": "Set the CanvasSource loading, when it's ready isReady() will return true.",
    "lineNumber": 46,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#ready",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#width",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#height",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#element",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#ready",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/sources/canvassource.js~CanvasSource",
    "longname": "src/sources/canvassource.js~CanvasSource#render",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "program",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderParameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "textures",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvasSource",
    "memberof": "src/sources/canvassource.js",
    "longname": "src/sources/canvassource.js~canvasSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/canvassource.js",
    "importStyle": "canvasSource",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "src/sources/canvassource.js~CanvasSource"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sources/imagesource.js",
    "memberof": null,
    "longname": "src/sources/imagesource.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "//Matthew Shotton, R&D User Experince,© BBC 2015\nimport MediaSource from \"./mediasource\";\n\nclass ImageSource extends MediaSource{\n    /**\n    * Image playback source. Inherits from MediaSource \n    *\n    * A ImageSource is the manifestation of a mediaSourceReference from a playlist object which has type \"image\". \n    * \n    * A ImageSource exists for a period slightly before a ImageSource is to play in order to give it time to preload and\n    * is destroyed as soon as the ImageSource has finished playing.\n    *\n    * @param {Object} properties - An object with the following attributes: id, duration, start, and src or element. \n    * Where src is the URL of a video, or element is a DOM Video element.\n    * \n    * @param {WebGLContext} gl - a webGl context to render too.\n    */\n    constructor(properties, gl){\n        super(properties, gl);\n    }\n    /**\n    * Set the ImageSource playing.\n    */\n    play(){\n        super.play();\n    }\n    /**\n    * Seek to playlist time and do something appropriate with this ImageSource. This has little effect on the image as it's \n    * static but can affect any effect shaders applied to this image and any MediaSourceListeners listening to the Id of \n    * this source.\n    * @param {number} seekTime - The time to seek too, this is the overall time for the whole playlist.\n    */\n    seek(time){\n        super.seek(time);\n    }\n    /**\n    * Pause the ImageSource if it is playing.\n    */\n    pause(){\n        super.pause();\n    }\n    /**\n    * Set the ImageSource loading, when it's ready isReady() will return true.\n    */\n    load(){\n        //check if we're using an already instatiated element, if so don't do anything.\n        if (super.load()){\n            this.seek(0);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.element);\n            this.ready = true;\n            // Upload the image into the texture.\n            this.width = this.element.width;\n            this.height = this.element.height;\n            this.onready(this);\n            return;\n        }\n\n        //otherwise begin the loading process for this mediaSource\n        this.element = new Image();\n        let _this = this;\n        this.element.onload = function(){\n            _this.gl.texImage2D(_this.gl.TEXTURE_2D, 0, _this.gl.RGBA, _this.gl.RGBA, _this.gl.UNSIGNED_BYTE, _this.element);\n            _this.ready = true;\n            _this.onready(_this);\n            _this.width = _this.element.width;\n            _this.height = _this.element.height;\n        };\n        this.element.src = this.src;\n    }\n    render(program,  renderParameters, textures){\n        super.render(program,  renderParameters, textures);\n    }\n}\n\nexport default ImageSource;"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ImageSource",
    "memberof": "src/sources/imagesource.js",
    "longname": "src/sources/imagesource.js~ImageSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/imagesource.js",
    "importStyle": "ImageSource",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/sources/mediasource~MediaSource"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#constructor",
    "access": null,
    "description": "Image playback source. Inherits from MediaSource \n\nA ImageSource is the manifestation of a mediaSourceReference from a playlist object which has type \"image\". \n\nA ImageSource exists for a period slightly before a ImageSource is to play in order to give it time to preload and\nis destroyed as soon as the ImageSource has finished playing.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "An object with the following attributes: id, duration, start, and src or element. \nWhere src is the URL of a video, or element is a DOM Video element."
      },
      {
        "nullable": null,
        "types": [
          "WebGLContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "a webGl context to render too."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#play",
    "access": null,
    "description": "Set the ImageSource playing.",
    "lineNumber": 24,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "seek",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#seek",
    "access": null,
    "description": "Seek to playlist time and do something appropriate with this ImageSource. This has little effect on the image as it's \nstatic but can affect any effect shaders applied to this image and any MediaSourceListeners listening to the Id of \nthis source.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seekTime",
        "description": "The time to seek too, this is the overall time for the whole playlist."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pause",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#pause",
    "access": null,
    "description": "Pause the ImageSource if it is playing.",
    "lineNumber": 39,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#load",
    "access": null,
    "description": "Set the ImageSource loading, when it's ready isReady() will return true.",
    "lineNumber": 45,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#ready",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#width",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#height",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#element",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/sources/imagesource.js~ImageSource",
    "longname": "src/sources/imagesource.js~ImageSource#render",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "program",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderParameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "textures",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "imageSource",
    "memberof": "src/sources/imagesource.js",
    "longname": "src/sources/imagesource.js~imageSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/imagesource.js",
    "importStyle": "imageSource",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "src/sources/imagesource.js~ImageSource"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sources/mediasource.js",
    "memberof": null,
    "longname": "src/sources/mediasource.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "//Matthew Shotton, R&D User Experince,© BBC 2015\n\nclass MediaSource {\n    /**\n    * Parent class of all MediaSources \n    *\n    * A MediaSource is the manifestation of a mediaSourceReference from a playlist object. It typically contains the \n    * original DOM element to be composited along with a number of functions to load, play, pause, seek and render that \n    * element to the webgl context.\n    * \n    * A MediaSource exists for a period slightly before a MediaSource is to play in order to give it time to preload and\n    * is destroyed as soon as the MediaSource has finished playing.\n    *\n    * @param {Object} properties - An object with the following attributes: id, duration, start, and src or element. \n    * Where src is the URL of something that can be used to create a DOM element that can be rendered to canvas, or \n    * element is a DOM element that can be rendered to a canvas.\n    * \n    * @param {WebGLContext} gl - a webGl context to render too.\n    */\n    constructor(properties, gl){\n        this.gl = gl;\n        this.id = properties.id;\n        this.duration = properties.duration;\n        this.start = properties.start;\n        this.playing = false;\n        this.ready = false;\n        this.element = undefined;\n        this.src = undefined;\n        this.texture = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.mediaSourceListeners = [];\n\n        this.disposeOfElementOnDestroy = false;\n\n        //If the mediaSource is created from a src string then it must be resonsible for cleaning itself up.\n        if (properties.src !== undefined){\n            this.disposeOfElementOnDestroy = true;\n            this.src = properties.src;\n        }else {\n            //If the MediaSource is created from an element then it should not clean the element up on destruction as it may be used elsewhere.\n            this.disposeOfElementOnDestroy = false;\n            this.element = properties.element;\n        }\n\n\n        /*let positionLocation = gl.getAttribLocation(program, \"a_position\");\n        let texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");*/\n        \n        //Hard Code these for now, but this is baaaaaad\n        let positionLocation = 0;\n        let texCoordLocation = 1;\n        \n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable ( gl.BLEND) ;\n        // Create a texture.\n        this.texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        // Set the parameters so we can render any size image.\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        \n\n        let buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.enableVertexAttribArray(positionLocation);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bufferData(\n            gl.ARRAY_BUFFER,\n            /*new Float32Array([\n                1.0, 1.0,\n                 -1.0, 1.0,\n                1.0,  -1.0,\n                1.0,  -1.0,\n                -1.0, 1.0,\n                -1.0, -1.0]),*/\n            new Float32Array([\n                1.0, 1.0,\n                0.0, 1.0,\n                1.0, 0.0,\n                1.0, 0.0,\n                0.0, 1.0,\n                0.0, 0.0]),\n            gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(texCoordLocation);\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    }\n    \n    /**\n    * Set the MediaSource playing.\n    */\n    play(){\n        //console.log(\"Playing\", this.id);\n        if (this.playing === false){\n            for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n                if(typeof this.mediaSourceListeners[i].play === 'function')this.mediaSourceListeners[i].play(this);\n            }    \n        }\n        this.playing = true;\n    }\n    /**\n    * Pause the MediaSource if it is playing.\n    */\n    pause(){\n        console.debug(\"Pausing\", this.id);\n        this.playing = false;\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if(typeof this.mediaSourceListeners[i].pause === 'function')this.mediaSourceListeners[i].pause(this);\n        }\n    }\n    /**\n    * Seek the MediaSource to an appropriate point for the passed time.\n    * @param {number} seekTime - The time to seek too, this is the overall time for the whole playlist.\n    */\n    seek(seekTime){\n        //this.currentTime = seekTime;\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if(typeof this.mediaSourceListeners[i].seek === 'function')this.mediaSourceListeners[i].seek(this, seekTime);\n        }\n    }\n    /**\n    * Check if the MediaSource is ready to start playing.\n    */\n    isReady(){\n        let listenerReady = true;\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if(typeof this.mediaSourceListeners[i].isReady === 'function'){\n                if (this.mediaSourceListeners[i].isReady(this) === false){\n                    listenerReady = false;\n                }\n            }\n        }\n        if (listenerReady === true && this.ready === true) return true;\n        return false;\n    }\n    /**\n    * Set the MediaSource loading, when it's ready isReady() will return true.\n    */\n    load(){\n        console.debug(\"Loading\", this.id);\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if(typeof this.mediaSourceListeners[i].load === 'function')this.mediaSourceListeners[i].load(this);\n        }\n        if (this.element !== undefined) {\n            return true;\n        }\n        return false;\n    }\n    /**\n    * Clean up the MediaSource for detruction.\n    */\n    destroy(){\n        console.debug(\"Destroying\", this.id);\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if (typeof this.mediaSourceListeners[i].destroy === 'function') this.mediaSourceListeners[i].destroy(this);\n        }\n        if (this.disposeOfElementOnDestroy){\n            delete this.element;  \n        }\n    }\n    /**\n    * Render the MediaSource to the WebGL context passed into the constructor.\n    */\n    render(program, renderParameters, textures){\n        //renders the media source to the WebGL context using the pased program\n        let overriddenElement;\n        for (let i = 0; i < this.mediaSourceListeners.length; i++) {\n            if (typeof this.mediaSourceListeners[i].render === 'function'){\n                let result =  this.mediaSourceListeners[i].render(this, renderParameters);\n                if (result !== undefined) overriddenElement = result;\n            }\n        }\n\n        this.gl.useProgram(program);\n        let renderParametersKeys = Object.keys(renderParameters);\n        let textureOffset = 1;\n        for (let index in renderParametersKeys){\n            let key = renderParametersKeys[index];\n            let parameterLoctation = this.gl.getUniformLocation(program, key);\n            if (parameterLoctation !== -1){\n                if (typeof renderParameters[key] === \"number\"){\n                    this.gl.uniform1f(parameterLoctation, renderParameters[key]);\n                }\n                else if( Object.prototype.toString.call(renderParameters[key]) === '[object Array]'){\n                    let array = renderParameters[key];\n                    if(array.length === 1){\n                        this.gl.uniform1fv(parameterLoctation, array);\n                    } else if(array.length === 2){\n                        this.gl.uniform2fv(parameterLoctation, array);\n                    } else if(array.length === 3){\n                        this.gl.uniform3fv(parameterLoctation, array);\n                    } else if(array.length === 4){\n                        this.gl.uniform4fv(parameterLoctation, array);\n                    } else{\n                        console.debug(\"Shader parameter\", key, \"is too long and array:\", array);\n                    }\n                }\n                else{\n                    //Is a texture\n                    this.gl.activeTexture(this.gl.TEXTURE0 + textureOffset);\n                    this.gl.uniform1i(parameterLoctation, textureOffset);\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, textures[textureOffset-1]);\n                }\n            }\n        }\n        \n        this.gl.activeTexture(this.gl.TEXTURE0);\n        let textureLocation = this.gl.getUniformLocation(program, \"u_image\");\n        this.gl.uniform1i(textureLocation, 0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        if (overriddenElement !== undefined){\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, overriddenElement);\n        } else {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.element);\n        }\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n    }\n    onready(mediaSource){\n    }\n}\n\nexport default MediaSource;"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MediaSource",
    "memberof": "src/sources/mediasource.js",
    "longname": "src/sources/mediasource.js~MediaSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/mediasource.js",
    "importStyle": "MediaSource",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#constructor",
    "access": null,
    "description": "Parent class of all MediaSources \n\nA MediaSource is the manifestation of a mediaSourceReference from a playlist object. It typically contains the \noriginal DOM element to be composited along with a number of functions to load, play, pause, seek and render that \nelement to the webgl context.\n\nA MediaSource exists for a period slightly before a MediaSource is to play in order to give it time to preload and\nis destroyed as soon as the MediaSource has finished playing.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "An object with the following attributes: id, duration, start, and src or element. \nWhere src is the URL of something that can be used to create a DOM element that can be rendered to canvas, or \nelement is a DOM element that can be rendered to a canvas."
      },
      {
        "nullable": null,
        "types": [
          "WebGLContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "a webGl context to render too."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#gl",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#id",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "duration",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#duration",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#start",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "playing",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#playing",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#ready",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#element",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "src",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#src",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "texture",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#texture",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#width",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#height",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mediaSourceListeners",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#mediaSourceListeners",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "disposeOfElementOnDestroy",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#disposeOfElementOnDestroy",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "disposeOfElementOnDestroy",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#disposeOfElementOnDestroy",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "src",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#src",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "disposeOfElementOnDestroy",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#disposeOfElementOnDestroy",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#element",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "texture",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#texture",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#play",
    "access": null,
    "description": "Set the MediaSource playing.",
    "lineNumber": 97,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "playing",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#playing",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pause",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#pause",
    "access": null,
    "description": "Pause the MediaSource if it is playing.",
    "lineNumber": 109,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "playing",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#playing",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "seek",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#seek",
    "access": null,
    "description": "Seek the MediaSource to an appropriate point for the passed time.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seekTime",
        "description": "The time to seek too, this is the overall time for the whole playlist."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isReady",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#isReady",
    "access": null,
    "description": "Check if the MediaSource is ready to start playing.",
    "lineNumber": 129,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#load",
    "access": null,
    "description": "Set the MediaSource loading, when it's ready isReady() will return true.",
    "lineNumber": 144,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#destroy",
    "access": null,
    "description": "Clean up the MediaSource for detruction.",
    "lineNumber": 157,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#render",
    "access": null,
    "description": "Render the MediaSource to the WebGL context passed into the constructor.",
    "lineNumber": 169,
    "params": [
      {
        "name": "program",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderParameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "textures",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onready",
    "memberof": "src/sources/mediasource.js~MediaSource",
    "longname": "src/sources/mediasource.js~MediaSource#onready",
    "access": null,
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "mediaSource",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mediaSource",
    "memberof": "src/sources/mediasource.js",
    "longname": "src/sources/mediasource.js~mediaSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/mediasource.js",
    "importStyle": "mediaSource",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "src/sources/mediasource.js~MediaSource"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sources/videosource.js",
    "memberof": null,
    "longname": "src/sources/videosource.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "//Matthew Shotton, R&D User Experince,© BBC 2015\nimport MediaSource from \"./mediasource\";\n\n\nfunction eventOneTime(element, type, callback){\n    let handleEvent = function(e){\n        e.target.removeEventListener(e.type, handleEvent);\n        return callback(e);\n    };\n\n    element.addEventListener(type, handleEvent, false);         \n}\n\n\n\nclass VideoSource extends MediaSource{\n    /**\n    * Video playback source. Inherits from MediaSource \n    *\n    * A VideoSource is the manifestation of a mediaSourceReference from a playlist object which has type \"video\". \n    * \n    * A VideoSource exists for a period slightly before a VideoSource is to play in order to give it time to preload and\n    * is destroyed as soon as the VideoSource has finished playing. You can define an offset into the original video to \n    * start playing by passing in a sourceStart value in the properties.\n    *\n    * @param {Object} properties - An object with the following attributes: id, duration, start, sourceStart, and src or element. \n    * Where src is the URL of a video, or element is a DOM Video element.\n    * \n    * @param {WebGLContext} gl - a webGl context to render too.\n    */\n    constructor(properties, gl){\n        super(properties, gl);\n        this.sourceStart = 0;\n        this._volume = 1.0;\n        if (properties.sourceStart !== undefined){\n            this.sourceStart = properties.sourceStart;\n        }\n        if (properties.volume !== undefined){\n            this._volume = properties.volume;\n        }\n    }\n    /**\n    * Set the VideoSource playing.\n    */\n    play(){\n        super.play();\n        let _this = this;\n\n        let playVideo = function(){\n            if (_this.element.readyState > 3){\n                _this.ready = true;\n                _this.element.play();\n            } else {\n                console.debug(\"Can't play video due to readyState\");\n                _this.ready = false;\n                eventOneTime(_this.element, \"canplay\", playVideo);\n            }\n        };\n\n        playVideo();\n    }\n    /**\n    * Seek the VideoSource to an appropriate point for the passed time.\n    * @param {number} seekTime - The time to seek too, this is the overall time for the whole playlist.\n    */\n    seek(time){\n        super.seek();\n        let _this = this;\n\n        let seekVideo = function(){\n            if (_this.element.readyState > 3){\n                _this.ready = true;\n                if ((time - _this.start) < 0 || time >(_this.start+_this.duration)){\n                    _this.element.currentTime = _this.sourceStart;\n                } else {\n                    _this.element.currentTime = (time - _this.start) + _this.sourceStart;\n                }\n            } else {\n                //If the element isn't ready to seek create a one-time event which seeks the element once it is ready.\n                console.debug(\"Can't seek video due to readyState\");\n                _this.ready = false;\n                eventOneTime(_this.element, \"canplay\", seekVideo);\n            }\n        };\n\n        seekVideo();  \n    }\n    /**\n    * Pause the VideoSource if it is playing.\n    */\n    pause(){\n        super.pause();\n        this.element.pause();\n    }\n    /**\n    * Set the VideoSource loading, when it's ready isReady() will return true.\n    */\n    load(){\n        //check if we're using an already instatiated element, if so don't do anything.\n\n        if (super.load()){\n            //this.element.currentTime = this.sourceStart;\n            this.seek(0);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.element);\n            this.ready = true;\n            this.width = this.element.videoWidth;\n            this.height = this.element.videoHeight;\n            this.onready(this);\n            return;\n        }\n        //otherwise begin the loading process for this mediaSource\n        this.element = document.createElement('video');            \n        //construct a fragement URL to cut the required segment from the source video\n        this.element.src = this.src;\n        this.element.volume = this._volume;\n        this.element.preload = \"auto\";\n        this.element.load();\n        let _this = this;\n        this.element.addEventListener('loadeddata', function() {\n            _this.element.currentTime = _this.sourceStart;\n            _this.seek(0);\n            _this.gl.texImage2D(_this.gl.TEXTURE_2D, 0, _this.gl.RGBA, _this.gl.RGBA, _this.gl.UNSIGNED_BYTE, _this.element);\n            _this.ready = true;\n            _this.width = _this.element.videoWidth;\n            _this.height = _this.element.videoHeight;\n            _this.onready(_this);\n        }, false);\n        /*this.element.addEventListener('seeked', function(){\n            console.log(\"SEEKED\");\n            _this.ready = true;\n            _this.onready(_this);\n        })*/\n\n\n    }\n    /**\n    * Render the VideoSource to the WebGL context passed into the constructor.\n    */\n    render(program, renderParameters, textures){\n        this.element.playbackRate = renderParameters[\"playback_rate\"];\n        super.render(program, renderParameters, textures);\n    }\n    /**\n    * Clean up the VideoSource for detruction.\n    */\n    destroy(){\n        this.element.pause();\n        if (this.disposeOfElementOnDestroy){\n            this.element.src = \"\";\n            this.element.removeAttribute(\"src\");    \n        }\n        super.destroy();\n    }\n}\n\nexport default VideoSource;"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eventOneTime",
    "memberof": "src/sources/videosource.js",
    "longname": "src/sources/videosource.js~eventOneTime",
    "access": null,
    "export": false,
    "importPath": "html5-video-compositor/src/sources/videosource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "VideoSource",
    "memberof": "src/sources/videosource.js",
    "longname": "src/sources/videosource.js~VideoSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/videosource.js",
    "importStyle": "VideoSource",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/sources/mediasource~MediaSource"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#constructor",
    "access": null,
    "description": "Video playback source. Inherits from MediaSource \n\nA VideoSource is the manifestation of a mediaSourceReference from a playlist object which has type \"video\". \n\nA VideoSource exists for a period slightly before a VideoSource is to play in order to give it time to preload and\nis destroyed as soon as the VideoSource has finished playing. You can define an offset into the original video to \nstart playing by passing in a sourceStart value in the properties.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "An object with the following attributes: id, duration, start, sourceStart, and src or element. \nWhere src is the URL of a video, or element is a DOM Video element."
      },
      {
        "nullable": null,
        "types": [
          "WebGLContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "a webGl context to render too."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceStart",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#sourceStart",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_volume",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#_volume",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceStart",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#sourceStart",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_volume",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#_volume",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#play",
    "access": null,
    "description": "Set the VideoSource playing.",
    "lineNumber": 45,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "seek",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#seek",
    "access": null,
    "description": "Seek the VideoSource to an appropriate point for the passed time.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seekTime",
        "description": "The time to seek too, this is the overall time for the whole playlist."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pause",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#pause",
    "access": null,
    "description": "Pause the VideoSource if it is playing.",
    "lineNumber": 91,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#load",
    "access": null,
    "description": "Set the VideoSource loading, when it's ready isReady() will return true.",
    "lineNumber": 98,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#ready",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#width",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#height",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#element",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#render",
    "access": null,
    "description": "Render the VideoSource to the WebGL context passed into the constructor.",
    "lineNumber": 139,
    "params": [
      {
        "name": "program",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderParameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "textures",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/sources/videosource.js~VideoSource",
    "longname": "src/sources/videosource.js~VideoSource#destroy",
    "access": null,
    "description": "Clean up the VideoSource for detruction.",
    "lineNumber": 146,
    "params": [],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "videoSource",
    "memberof": "src/sources/videosource.js",
    "longname": "src/sources/videosource.js~videoSource",
    "access": null,
    "export": true,
    "importPath": "html5-video-compositor/src/sources/videosource.js",
    "importStyle": "videoSource",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "src/sources/videosource.js~VideoSource"
      ]
    }
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]